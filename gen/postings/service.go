// Code generated by goa v3.10.2, DO NOT EDIT.
//
// postings service
//
// Command:
// $ goa gen backend/design

package postings

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Service is the postings service interface.
type Service interface {
	// CreatePost implements create_post.
	CreatePost(context.Context, *CreatePostPayload) (res *CreatePostResult, err error)
	// DeletePost implements delete_post.
	DeletePost(context.Context, *DeletePostPayload) (err error)
	// EditPost implements edit_post.
	EditPost(context.Context, *EditPostPayload) (res *EditPostResult, err error)
	// GetPostPage implements get_post_page.
	GetPostPage(context.Context, *GetPostPagePayload) (res *GetPostPageResult, err error)
	// GetArtistPostPage implements get_artist_post_page.
	GetArtistPostPage(context.Context, *GetArtistPostPagePayload) (res *GetArtistPostPageResult, err error)
	// GetPostPageFiltered implements get_post_page_filtered.
	GetPostPageFiltered(context.Context, *GetPostPageFilteredPayload) (res *GetPostPageFilteredResult, err error)
	// GetImagesForPost implements get_images_for_post.
	GetImagesForPost(context.Context, *GetImagesForPostPayload) (res *GetImagesForPostResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "postings"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [7]string{"create_post", "delete_post", "edit_post", "get_post_page", "get_artist_post_page", "get_post_page_filtered", "get_images_for_post"}

// Image Content
type Content struct {
	// raw image content
	Content *string
}

// CreatePostPayload is the payload type of the postings service create_post
// method.
type CreatePostPayload struct {
	// jwt used for auth
	Token string
	// Post info
	Post *Post
}

// CreatePostResult is the result type of the postings service create_post
// method.
type CreatePostResult struct {
	Posted *PostResponse
}

// DeletePostPayload is the payload type of the postings service delete_post
// method.
type DeletePostPayload struct {
	// jwt used for auth
	Token string
	// Post to delete
	PostID string
}

// EditPostPayload is the payload type of the postings service edit_post method.
type EditPostPayload struct {
	// jwt used for auth
	Token string
	// Post ID
	PostID string
	// Post title
	Title *string
	// Post description
	Description *string
	// Post price
	Price *string
	// Image content
	Content *Content
	// Art type
	Medium *string
	// is sold
	Sold *bool
	// Delivery type
	Deliverytype *string
	// Image ID
	ImageID *string
}

// EditPostResult is the result type of the postings service edit_post method.
type EditPostResult struct {
	Posted *PostResponse
}

// GetArtistPostPagePayload is the payload type of the postings service
// get_artist_post_page method.
type GetArtistPostPagePayload struct {
	// User ID to get posts for
	UserID string
	// Page to get posts for
	Page int
}

// GetArtistPostPageResult is the result type of the postings service
// get_artist_post_page method.
type GetArtistPostPageResult struct {
	Posts []*PostResponse
}

// GetImagesForPostPayload is the payload type of the postings service
// get_images_for_post method.
type GetImagesForPostPayload struct {
	// Post to get images for
	PostID string
}

// GetImagesForPostResult is the result type of the postings service
// get_images_for_post method.
type GetImagesForPostResult struct {
	Images []string
}

// GetPostPageFilteredPayload is the payload type of the postings service
// get_post_page_filtered method.
type GetPostPageFilteredPayload struct {
	// Page to get posts for
	Page int
	// Search bar keyword to search for in title and description
	Keyword *string
	// Filter attribute to see posts after given date
	StartDate *string
	// Filter attribute to see posts before given date
	EndDate *string
	// Filter attribute to see posts with given medium type
	Medium *string
}

// GetPostPageFilteredResult is the result type of the postings service
// get_post_page_filtered method.
type GetPostPageFilteredResult struct {
	Posts []*PostResponse
}

// GetPostPagePayload is the payload type of the postings service get_post_page
// method.
type GetPostPagePayload struct {
	// Page to get posts for
	Page int
}

// GetPostPageResult is the result type of the postings service get_post_page
// method.
type GetPostPageResult struct {
	Posts []*PostResponse
}

// Describes a post payload
type Post struct {
	// Post title
	Title string
	// Post description
	Description string
	// Post price
	Price string
	// Post content
	Content []string
	// Art type
	Medium string
	// Delivery type
	Deliverytype string
}

// Describes a post response
type PostResponse struct {
	// Post title
	Title string
	// Post description
	Description string
	// Post price
	Price string
	// Image ID
	ImageIDs []string
	// Post ID
	PostID string
	// Art type
	Medium string
	// Upload Date
	UploadDate string
	// is sold
	Sold bool
	// Delivery type
	Deliverytype string
	// User id associated with post
	UserID string
	// prof pic id
	ProfpicID string
	// Username associated with post
	Username string
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unauthorized", false, false, false)
}

// MakeInternal builds a goa.ServiceError from an error.
func MakeInternal(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "internal", false, false, false)
}
