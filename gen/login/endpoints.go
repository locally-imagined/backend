// Code generated by goa v3.10.1, DO NOT EDIT.
//
// login endpoints
//
// Command:
// $ goa gen backend/design

package login

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "login" service endpoints.
type Endpoints struct {
	Login goa.Endpoint
}

// NewEndpoints wraps the methods of the "login" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		Login: NewLoginEndpoint(s, a.BasicAuth),
	}
}

// Use applies the given middleware to all the "login" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Login = m(e.Login)
}

// NewLoginEndpoint returns an endpoint function that calls the method "Login"
// of service "login".
func NewLoginEndpoint(s Service, authBasicFn security.AuthBasicFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*LoginPayload)
		var err error
		sc := security.BasicScheme{
			Name:           "login",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authBasicFn(ctx, p.Username, p.Password, &sc)
		if err != nil {
			return nil, err
		}
		return s.Login(ctx, p)
	}
}
