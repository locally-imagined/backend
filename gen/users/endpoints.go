// Code generated by goa v3.10.2, DO NOT EDIT.
//
// users endpoints
//
// Command:
// $ goa gen backend/design

package users

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "users" service endpoints.
type Endpoints struct {
	UpdateBio            goa.Endpoint
	UpdateProfilePicture goa.Endpoint
	GetContactInfo       goa.Endpoint
}

// NewEndpoints wraps the methods of the "users" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		UpdateBio:            NewUpdateBioEndpoint(s, a.JWTAuth),
		UpdateProfilePicture: NewUpdateProfilePictureEndpoint(s, a.JWTAuth),
		GetContactInfo:       NewGetContactInfoEndpoint(s),
	}
}

// Use applies the given middleware to all the "users" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.UpdateBio = m(e.UpdateBio)
	e.UpdateProfilePicture = m(e.UpdateProfilePicture)
	e.GetContactInfo = m(e.GetContactInfo)
}

// NewUpdateBioEndpoint returns an endpoint function that calls the method
// "update_bio" of service "users".
func NewUpdateBioEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*UpdateBioPayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateBio(ctx, p)
	}
}

// NewUpdateProfilePictureEndpoint returns an endpoint function that calls the
// method "update_profile_picture" of service "users".
func NewUpdateProfilePictureEndpoint(s Service, authJWTFn security.AuthJWTFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*UpdateProfilePicturePayload)
		var err error
		sc := security.JWTScheme{
			Name:           "jwt",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		ctx, err = authJWTFn(ctx, p.Token, &sc)
		if err != nil {
			return nil, err
		}
		return s.UpdateProfilePicture(ctx, p)
	}
}

// NewGetContactInfoEndpoint returns an endpoint function that calls the method
// "get_contact_info" of service "users".
func NewGetContactInfoEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetContactInfoPayload)
		return s.GetContactInfo(ctx, p)
	}
}
