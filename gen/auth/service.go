// Code generated by goa v3.10.1, DO NOT EDIT.
//
// auth service
//
// Command:
// $ goa gen backend/design

package auth

import (
	"context"

	"goa.design/goa/v3/security"
)

// Service is the auth service interface.
type Service interface {
	// Login implements Login.
	Login(context.Context, *LoginPayload) (res *LoginResult, err error)
	// Signup implements Signup.
	Signup(context.Context, *SignupPayload) (res *SignupResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// BasicAuth implements the authorization logic for the Basic security scheme.
	BasicAuth(ctx context.Context, user, pass string, schema *security.BasicScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "auth"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"Login", "Signup"}

// LoginPayload is the payload type of the auth service Login method.
type LoginPayload struct {
	// Raw username
	Username string
	// User password
	Password string
}

// LoginResult is the result type of the auth service Login method.
type LoginResult struct {
	JWT                      *string
	AccessControlAllowOrigin *string
}

// SignupPayload is the payload type of the auth service Signup method.
type SignupPayload struct {
	// Raw username
	Username *string
	// User password
	Password *string
}

// SignupResult is the result type of the auth service Signup method.
type SignupResult struct {
	JWT                      *string
	AccessControlAllowOrigin *string
}

// Credentials are invalid
type Unauthorized string

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "Credentials are invalid"
}

// ErrorName returns "unauthorized".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e Unauthorized) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "unauthorized".
func (e Unauthorized) GoaErrorName() string {
	return "unauthorized"
}
