// Code generated by goa v3.10.1, DO NOT EDIT.
//
// auth endpoints
//
// Command:
// $ goa gen backend/design

package auth

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "auth" service endpoints.
type Endpoints struct {
	Login  goa.Endpoint
	Signup goa.Endpoint
}

// NewEndpoints wraps the methods of the "auth" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Login:  NewLoginEndpoint(s),
		Signup: NewSignupEndpoint(s),
	}
}

// Use applies the given middleware to all the "auth" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Login = m(e.Login)
	e.Signup = m(e.Signup)
}

// NewLoginEndpoint returns an endpoint function that calls the method "Login"
// of service "auth".
func NewLoginEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*LoginPayload)
		return s.Login(ctx, p)
	}
}

// NewSignupEndpoint returns an endpoint function that calls the method
// "Signup" of service "auth".
func NewSignupEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*SignupPayload)
		return s.Signup(ctx, p)
	}
}
