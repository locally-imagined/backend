// Code generated by goa v3.10.2, DO NOT EDIT.
//
// postings client HTTP transport
//
// Command:
// $ goa gen backend/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the postings service endpoint HTTP clients.
type Client struct {
	// CreatePost Doer is the HTTP client used to make requests to the create_post
	// endpoint.
	CreatePostDoer goahttp.Doer

	// DeletePost Doer is the HTTP client used to make requests to the delete_post
	// endpoint.
	DeletePostDoer goahttp.Doer

	// EditPost Doer is the HTTP client used to make requests to the edit_post
	// endpoint.
	EditPostDoer goahttp.Doer

	// GetPostPage Doer is the HTTP client used to make requests to the
	// get_post_page endpoint.
	GetPostPageDoer goahttp.Doer

	// GetArtistPostPage Doer is the HTTP client used to make requests to the
	// get_artist_post_page endpoint.
	GetArtistPostPageDoer goahttp.Doer

	// GetPostPageFiltered Doer is the HTTP client used to make requests to the
	// get_post_page_filtered endpoint.
	GetPostPageFilteredDoer goahttp.Doer

	// GetImagesForPost Doer is the HTTP client used to make requests to the
	// get_images_for_post endpoint.
	GetImagesForPostDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the postings service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreatePostDoer:          doer,
		DeletePostDoer:          doer,
		EditPostDoer:            doer,
		GetPostPageDoer:         doer,
		GetArtistPostPageDoer:   doer,
		GetPostPageFilteredDoer: doer,
		GetImagesForPostDoer:    doer,
		CORSDoer:                doer,
		RestoreResponseBody:     restoreBody,
		scheme:                  scheme,
		host:                    host,
		decoder:                 dec,
		encoder:                 enc,
	}
}

// CreatePost returns an endpoint that makes HTTP requests to the postings
// service create_post server.
func (c *Client) CreatePost() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreatePostRequest(c.encoder)
		decodeResponse = DecodeCreatePostResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreatePostRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreatePostDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("postings", "create_post", err)
		}
		return decodeResponse(resp)
	}
}

// DeletePost returns an endpoint that makes HTTP requests to the postings
// service delete_post server.
func (c *Client) DeletePost() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeletePostRequest(c.encoder)
		decodeResponse = DecodeDeletePostResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDeletePostRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeletePostDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("postings", "delete_post", err)
		}
		return decodeResponse(resp)
	}
}

// EditPost returns an endpoint that makes HTTP requests to the postings
// service edit_post server.
func (c *Client) EditPost() goa.Endpoint {
	var (
		encodeRequest  = EncodeEditPostRequest(c.encoder)
		decodeResponse = DecodeEditPostResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildEditPostRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.EditPostDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("postings", "edit_post", err)
		}
		return decodeResponse(resp)
	}
}

// GetPostPage returns an endpoint that makes HTTP requests to the postings
// service get_post_page server.
func (c *Client) GetPostPage() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetPostPageRequest(c.encoder)
		decodeResponse = DecodeGetPostPageResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetPostPageRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetPostPageDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("postings", "get_post_page", err)
		}
		return decodeResponse(resp)
	}
}

// GetArtistPostPage returns an endpoint that makes HTTP requests to the
// postings service get_artist_post_page server.
func (c *Client) GetArtistPostPage() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetArtistPostPageRequest(c.encoder)
		decodeResponse = DecodeGetArtistPostPageResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetArtistPostPageRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetArtistPostPageDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("postings", "get_artist_post_page", err)
		}
		return decodeResponse(resp)
	}
}

// GetPostPageFiltered returns an endpoint that makes HTTP requests to the
// postings service get_post_page_filtered server.
func (c *Client) GetPostPageFiltered() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetPostPageFilteredRequest(c.encoder)
		decodeResponse = DecodeGetPostPageFilteredResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetPostPageFilteredRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetPostPageFilteredDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("postings", "get_post_page_filtered", err)
		}
		return decodeResponse(resp)
	}
}

// GetImagesForPost returns an endpoint that makes HTTP requests to the
// postings service get_images_for_post server.
func (c *Client) GetImagesForPost() goa.Endpoint {
	var (
		decodeResponse = DecodeGetImagesForPostResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetImagesForPostRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetImagesForPostDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("postings", "get_images_for_post", err)
		}
		return decodeResponse(resp)
	}
}
