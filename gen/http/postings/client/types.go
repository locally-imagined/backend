// Code generated by goa v3.10.2, DO NOT EDIT.
//
// postings HTTP client types
//
// Command:
// $ goa gen backend/design

package client

import (
	postings "backend/gen/postings"

	goa "goa.design/goa/v3/pkg"
)

// CreatePostRequestBody is the type of the "postings" service "create_post"
// endpoint HTTP request body.
type CreatePostRequestBody struct {
	// Post title
	Title string `form:"title" json:"title" xml:"title"`
	// Post description
	Description string `form:"description" json:"description" xml:"description"`
	// Post price
	Price string `form:"price" json:"price" xml:"price"`
	// Post content
	Content []string `form:"content" json:"content" xml:"content"`
	// Art type
	Medium string `form:"medium" json:"medium" xml:"medium"`
	// Delivery type
	Deliverytype string `form:"deliverytype" json:"deliverytype" xml:"deliverytype"`
}

// GetArtistPostPageRequestBody is the type of the "postings" service
// "get_artist_post_page" endpoint HTTP request body.
type GetArtistPostPageRequestBody struct {
	// User ID to get posts for
	UserID string `form:"userID" json:"userID" xml:"userID"`
}

// CreatePostResponseBody is the type of the "postings" service "create_post"
// endpoint HTTP response body.
type CreatePostResponseBody PostResponseResponseBody

// EditPostResponseBody is the type of the "postings" service "edit_post"
// endpoint HTTP response body.
type EditPostResponseBody PostResponseResponseBody

// GetPostPageResponseBody is the type of the "postings" service
// "get_post_page" endpoint HTTP response body.
type GetPostPageResponseBody []*PostResponse

// GetArtistPostPageResponseBody is the type of the "postings" service
// "get_artist_post_page" endpoint HTTP response body.
type GetArtistPostPageResponseBody []*PostResponse

// GetPostPageFilteredResponseBody is the type of the "postings" service
// "get_post_page_filtered" endpoint HTTP response body.
type GetPostPageFilteredResponseBody []*PostResponse

// PostResponseResponseBody is used to define fields on response body types.
type PostResponseResponseBody struct {
	// Post title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Post description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Post price
	Price *string `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// Image ID
	ImageIDs []string `form:"imageIDs,omitempty" json:"imageIDs,omitempty" xml:"imageIDs,omitempty"`
	// Post ID
	PostID *string `form:"postID,omitempty" json:"postID,omitempty" xml:"postID,omitempty"`
	// Art type
	Medium *string `form:"medium,omitempty" json:"medium,omitempty" xml:"medium,omitempty"`
	// Upload Date
	UploadDate *string `form:"uploadDate,omitempty" json:"uploadDate,omitempty" xml:"uploadDate,omitempty"`
	// is sold
	Sold *bool `form:"sold,omitempty" json:"sold,omitempty" xml:"sold,omitempty"`
	// Delivery type
	Deliverytype *string `form:"deliverytype,omitempty" json:"deliverytype,omitempty" xml:"deliverytype,omitempty"`
	// User id associated with post
	UserID *string `form:"userID,omitempty" json:"userID,omitempty" xml:"userID,omitempty"`
	// Username associated with post
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// PostResponse is used to define fields on response body types.
type PostResponse struct {
	// Post title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Post description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Post price
	Price *string `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// Image ID
	ImageIDs []string `form:"imageIDs,omitempty" json:"imageIDs,omitempty" xml:"imageIDs,omitempty"`
	// Post ID
	PostID *string `form:"postID,omitempty" json:"postID,omitempty" xml:"postID,omitempty"`
	// Art type
	Medium *string `form:"medium,omitempty" json:"medium,omitempty" xml:"medium,omitempty"`
	// Upload Date
	UploadDate *string `form:"uploadDate,omitempty" json:"uploadDate,omitempty" xml:"uploadDate,omitempty"`
	// is sold
	Sold *bool `form:"sold,omitempty" json:"sold,omitempty" xml:"sold,omitempty"`
	// Delivery type
	Deliverytype *string `form:"deliverytype,omitempty" json:"deliverytype,omitempty" xml:"deliverytype,omitempty"`
	// User id associated with post
	UserID *string `form:"userID,omitempty" json:"userID,omitempty" xml:"userID,omitempty"`
	// Username associated with post
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
}

// NewCreatePostRequestBody builds the HTTP request body from the payload of
// the "create_post" endpoint of the "postings" service.
func NewCreatePostRequestBody(p *postings.CreatePostPayload) *CreatePostRequestBody {
	body := &CreatePostRequestBody{
		Title:        p.Post.Title,
		Description:  p.Post.Description,
		Price:        p.Post.Price,
		Medium:       p.Post.Medium,
		Deliverytype: p.Post.Deliverytype,
	}
	if p.Post.Content != nil {
		body.Content = make([]string, len(p.Post.Content))
		for i, val := range p.Post.Content {
			body.Content[i] = val
		}
	}
	return body
}

// NewGetArtistPostPageRequestBody builds the HTTP request body from the
// payload of the "get_artist_post_page" endpoint of the "postings" service.
func NewGetArtistPostPageRequestBody(p *postings.GetArtistPostPagePayload) *GetArtistPostPageRequestBody {
	body := &GetArtistPostPageRequestBody{
		UserID: p.UserID,
	}
	return body
}

// NewCreatePostResultOK builds a "postings" service "create_post" endpoint
// result from a HTTP "OK" response.
func NewCreatePostResultOK(body *CreatePostResponseBody) *postings.CreatePostResult {
	v := &postings.PostResponse{
		Title:        *body.Title,
		Description:  *body.Description,
		Price:        *body.Price,
		PostID:       *body.PostID,
		Medium:       *body.Medium,
		UploadDate:   *body.UploadDate,
		Sold:         *body.Sold,
		Deliverytype: *body.Deliverytype,
		UserID:       *body.UserID,
		Username:     *body.Username,
	}
	v.ImageIDs = make([]string, len(body.ImageIDs))
	for i, val := range body.ImageIDs {
		v.ImageIDs[i] = val
	}
	res := &postings.CreatePostResult{
		Posted: v,
	}

	return res
}

// NewEditPostResultOK builds a "postings" service "edit_post" endpoint result
// from a HTTP "OK" response.
func NewEditPostResultOK(body *EditPostResponseBody) *postings.EditPostResult {
	v := &postings.PostResponse{
		Title:        *body.Title,
		Description:  *body.Description,
		Price:        *body.Price,
		PostID:       *body.PostID,
		Medium:       *body.Medium,
		UploadDate:   *body.UploadDate,
		Sold:         *body.Sold,
		Deliverytype: *body.Deliverytype,
		UserID:       *body.UserID,
		Username:     *body.Username,
	}
	v.ImageIDs = make([]string, len(body.ImageIDs))
	for i, val := range body.ImageIDs {
		v.ImageIDs[i] = val
	}
	res := &postings.EditPostResult{
		Posted: v,
	}

	return res
}

// NewGetPostPageResultOK builds a "postings" service "get_post_page" endpoint
// result from a HTTP "OK" response.
func NewGetPostPageResultOK(body []*PostResponse) *postings.GetPostPageResult {
	v := make([]*postings.PostResponse, len(body))
	for i, val := range body {
		v[i] = unmarshalPostResponseToPostingsPostResponse(val)
	}
	res := &postings.GetPostPageResult{
		Posts: v,
	}

	return res
}

// NewGetArtistPostPageResultOK builds a "postings" service
// "get_artist_post_page" endpoint result from a HTTP "OK" response.
func NewGetArtistPostPageResultOK(body []*PostResponse) *postings.GetArtistPostPageResult {
	v := make([]*postings.PostResponse, len(body))
	for i, val := range body {
		v[i] = unmarshalPostResponseToPostingsPostResponse(val)
	}
	res := &postings.GetArtistPostPageResult{
		Posts: v,
	}

	return res
}

// NewGetPostPageFilteredResultOK builds a "postings" service
// "get_post_page_filtered" endpoint result from a HTTP "OK" response.
func NewGetPostPageFilteredResultOK(body []*PostResponse) *postings.GetPostPageFilteredResult {
	v := make([]*postings.PostResponse, len(body))
	for i, val := range body {
		v[i] = unmarshalPostResponseToPostingsPostResponse(val)
	}
	res := &postings.GetPostPageFilteredResult{
		Posts: v,
	}

	return res
}

// NewGetImagesForPostResultOK builds a "postings" service
// "get_images_for_post" endpoint result from a HTTP "OK" response.
func NewGetImagesForPostResultOK(body []string) *postings.GetImagesForPostResult {
	v := make([]string, len(body))
	for i, val := range body {
		v[i] = val
	}
	res := &postings.GetImagesForPostResult{
		Images: v,
	}

	return res
}

// ValidateCreatePostResponseBody runs the validations defined on
// create_post_response_body
func ValidateCreatePostResponseBody(body *CreatePostResponseBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.ImageIDs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("imageIDs", "body"))
	}
	if body.PostID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("postID", "body"))
	}
	if body.Medium == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("medium", "body"))
	}
	if body.UploadDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uploadDate", "body"))
	}
	if body.Sold == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sold", "body"))
	}
	if body.Deliverytype == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deliverytype", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userID", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	return
}

// ValidateEditPostResponseBody runs the validations defined on
// edit_post_response_body
func ValidateEditPostResponseBody(body *EditPostResponseBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.ImageIDs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("imageIDs", "body"))
	}
	if body.PostID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("postID", "body"))
	}
	if body.Medium == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("medium", "body"))
	}
	if body.UploadDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uploadDate", "body"))
	}
	if body.Sold == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sold", "body"))
	}
	if body.Deliverytype == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deliverytype", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userID", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	return
}

// ValidatePostResponseResponseBody runs the validations defined on
// PostResponseResponseBody
func ValidatePostResponseResponseBody(body *PostResponseResponseBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.ImageIDs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("imageIDs", "body"))
	}
	if body.PostID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("postID", "body"))
	}
	if body.Medium == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("medium", "body"))
	}
	if body.UploadDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uploadDate", "body"))
	}
	if body.Sold == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sold", "body"))
	}
	if body.Deliverytype == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deliverytype", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userID", "body"))
	}
	return
}

// ValidatePostResponse runs the validations defined on PostResponse
func ValidatePostResponse(body *PostResponse) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.ImageIDs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("imageIDs", "body"))
	}
	if body.PostID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("postID", "body"))
	}
	if body.Medium == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("medium", "body"))
	}
	if body.UploadDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uploadDate", "body"))
	}
	if body.Sold == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("sold", "body"))
	}
	if body.Deliverytype == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deliverytype", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userID", "body"))
	}
	return
}
