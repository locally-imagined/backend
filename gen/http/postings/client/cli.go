// Code generated by goa v3.10.2, DO NOT EDIT.
//
// postings HTTP client CLI support package
//
// Command:
// $ goa gen backend/design

package client

import (
	postings "backend/gen/postings"
	"encoding/json"
	"fmt"
	"strconv"

	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePostPayload builds the payload for the postings create_post
// endpoint from CLI flags.
func BuildCreatePostPayload(postingsCreatePostBody string, postingsCreatePostToken string) (*postings.CreatePostPayload, error) {
	var err error
	var body CreatePostRequestBody
	{
		err = json.Unmarshal([]byte(postingsCreatePostBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"content\": [\n         \"Nesciunt impedit.\",\n         \"Rerum qui quo minima.\",\n         \"Numquam expedita excepturi quos ut officia sit.\"\n      ],\n      \"description\": \"Voluptas ipsum rerum iure minima nihil odio.\",\n      \"medium\": \"Quaerat non nobis repudiandae autem iste.\",\n      \"price\": \"Dolorem aut hic dolores est.\",\n      \"title\": \"Neque praesentium distinctio impedit perferendis aut.\"\n   }'")
		}
		if body.Content == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var token string
	{
		token = postingsCreatePostToken
	}
	v := &postings.Post{
		Title:       body.Title,
		Description: body.Description,
		Price:       body.Price,
		Medium:      body.Medium,
	}
	if body.Content != nil {
		v.Content = make([]string, len(body.Content))
		for i, val := range body.Content {
			v.Content[i] = val
		}
	}
	res := &postings.CreatePostPayload{
		Post: v,
	}
	res.Token = token

	return res, nil
}

// BuildDeletePostPayload builds the payload for the postings delete_post
// endpoint from CLI flags.
func BuildDeletePostPayload(postingsDeletePostPostID string, postingsDeletePostToken string) (*postings.DeletePostPayload, error) {
	var postID string
	{
		postID = postingsDeletePostPostID
	}
	var token string
	{
		token = postingsDeletePostToken
	}
	v := &postings.DeletePostPayload{}
	v.PostID = postID
	v.Token = token

	return v, nil
}

// BuildEditPostPayload builds the payload for the postings edit_post endpoint
// from CLI flags.
func BuildEditPostPayload(postingsEditPostPostID string, postingsEditPostTitle string, postingsEditPostDescription string, postingsEditPostPrice string, postingsEditPostContent string, postingsEditPostMedium string, postingsEditPostSold string, postingsEditPostImageID string, postingsEditPostToken string) (*postings.EditPostPayload, error) {
	var err error
	var postID string
	{
		postID = postingsEditPostPostID
	}
	var title *string
	{
		if postingsEditPostTitle != "" {
			title = &postingsEditPostTitle
		}
	}
	var description *string
	{
		if postingsEditPostDescription != "" {
			description = &postingsEditPostDescription
		}
	}
	var price *string
	{
		if postingsEditPostPrice != "" {
			price = &postingsEditPostPrice
		}
	}
	var content *string
	{
		if postingsEditPostContent != "" {
			content = &postingsEditPostContent
		}
	}
	var medium *string
	{
		if postingsEditPostMedium != "" {
			medium = &postingsEditPostMedium
		}
	}
	var sold *bool
	{
		if postingsEditPostSold != "" {
			var val bool
			val, err = strconv.ParseBool(postingsEditPostSold)
			sold = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for sold, must be BOOL")
			}
		}
	}
	var imageID *string
	{
		if postingsEditPostImageID != "" {
			imageID = &postingsEditPostImageID
		}
	}
	var token string
	{
		token = postingsEditPostToken
	}
	v := &postings.EditPostPayload{}
	v.PostID = postID
	v.Title = title
	v.Description = description
	v.Price = price
	v.Content = content
	v.Medium = medium
	v.Sold = sold
	v.ImageID = imageID
	v.Token = token

	return v, nil
}

// BuildGetPostPagePayload builds the payload for the postings get_post_page
// endpoint from CLI flags.
func BuildGetPostPagePayload(postingsGetPostPagePage string) (*postings.GetPostPagePayload, error) {
	var err error
	var page int
	{
		var v int64
		v, err = strconv.ParseInt(postingsGetPostPagePage, 10, strconv.IntSize)
		page = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for page, must be INT")
		}
	}
	v := &postings.GetPostPagePayload{}
	v.Page = page

	return v, nil
}

// BuildGetImagesForPostPayload builds the payload for the postings
// get_images_for_post endpoint from CLI flags.
func BuildGetImagesForPostPayload(postingsGetImagesForPostPostID string) (*postings.GetImagesForPostPayload, error) {
	var postID string
	{
		postID = postingsGetImagesForPostPostID
	}
	v := &postings.GetImagesForPostPayload{}
	v.PostID = postID

	return v, nil
}
