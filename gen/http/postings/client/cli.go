// Code generated by goa v3.10.2, DO NOT EDIT.
//
// postings HTTP client CLI support package
//
// Command:
// $ goa gen backend/design

package client

import (
	postings "backend/gen/postings"
	"encoding/json"
	"fmt"

	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePostPayload builds the payload for the postings create_post
// endpoint from CLI flags.
func BuildCreatePostPayload(postingsCreatePostBody string, postingsCreatePostToken string) (*postings.CreatePostPayload, error) {
	var err error
	var body CreatePostRequestBody
	{
		err = json.Unmarshal([]byte(postingsCreatePostBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"content\": \"RWFydW0gcXVpYSBhdXQu\",\n      \"description\": \"Nam doloribus dolor commodi consequuntur perferendis ea.\",\n      \"price\": \"Qui unde et mollitia modi.\",\n      \"title\": \"Commodi officiis numquam molestiae.\"\n   }'")
		}
		if body.Content == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var token string
	{
		token = postingsCreatePostToken
	}
	v := &postings.Post{
		Title:       body.Title,
		Description: body.Description,
		Price:       body.Price,
		Content:     body.Content,
	}
	res := &postings.CreatePostPayload{
		Post: v,
	}
	res.Token = token

	return res, nil
}
