// Code generated by goa v3.10.2, DO NOT EDIT.
//
// postings HTTP client encoders and decoders
//
// Command:
// $ goa gen backend/design

package client

import (
	postings "backend/gen/postings"
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	goahttp "goa.design/goa/v3/http"
)

// BuildCreatePostRequest instantiates a HTTP request object with method and
// path set to call the "postings" service "create_post" endpoint
func (c *Client) BuildCreatePostRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreatePostPostingsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("postings", "create_post", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreatePostRequest returns an encoder for requests sent to the postings
// create_post server.
func EncodeCreatePostRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*postings.CreatePostPayload)
		if !ok {
			return goahttp.ErrInvalidType("postings", "create_post", "*postings.CreatePostPayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewCreatePostRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("postings", "create_post", err)
		}
		return nil
	}
}

// DecodeCreatePostResponse returns a decoder for responses returned by the
// postings create_post endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeCreatePostResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreatePostResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("postings", "create_post", err)
			}
			err = ValidateCreatePostResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("postings", "create_post", err)
			}
			res := NewCreatePostResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("postings", "create_post", resp.StatusCode, string(body))
		}
	}
}
