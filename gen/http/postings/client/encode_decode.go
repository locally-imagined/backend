// Code generated by goa v3.10.2, DO NOT EDIT.
//
// postings HTTP client encoders and decoders
//
// Command:
// $ goa gen backend/design

package client

import (
	postings "backend/gen/postings"
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePostRequest instantiates a HTTP request object with method and
// path set to call the "postings" service "create_post" endpoint
func (c *Client) BuildCreatePostRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreatePostPostingsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("postings", "create_post", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreatePostRequest returns an encoder for requests sent to the postings
// create_post server.
func EncodeCreatePostRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*postings.CreatePostPayload)
		if !ok {
			return goahttp.ErrInvalidType("postings", "create_post", "*postings.CreatePostPayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewCreatePostRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("postings", "create_post", err)
		}
		return nil
	}
}

// DecodeCreatePostResponse returns a decoder for responses returned by the
// postings create_post endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeCreatePostResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "internal" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeCreatePostResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreatePostResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("postings", "create_post", err)
			}
			err = ValidateCreatePostResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("postings", "create_post", err)
			}
			res := NewCreatePostResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body CreatePostUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("postings", "create_post", err)
			}
			err = ValidateCreatePostUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("postings", "create_post", err)
			}
			return nil, NewCreatePostUnauthorized(&body)
		case http.StatusInternalServerError:
			var (
				body CreatePostInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("postings", "create_post", err)
			}
			err = ValidateCreatePostInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("postings", "create_post", err)
			}
			return nil, NewCreatePostInternal(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("postings", "create_post", resp.StatusCode, string(body))
		}
	}
}

// BuildDeletePostRequest instantiates a HTTP request object with method and
// path set to call the "postings" service "delete_post" endpoint
func (c *Client) BuildDeletePostRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		postID string
	)
	{
		p, ok := v.(*postings.DeletePostPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("postings", "delete_post", "*postings.DeletePostPayload", v)
		}
		postID = p.PostID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeletePostPostingsPath(postID)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("postings", "delete_post", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeletePostRequest returns an encoder for requests sent to the postings
// delete_post server.
func EncodeDeletePostRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*postings.DeletePostPayload)
		if !ok {
			return goahttp.ErrInvalidType("postings", "delete_post", "*postings.DeletePostPayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeDeletePostResponse returns a decoder for responses returned by the
// postings delete_post endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeDeletePostResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "internal" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeDeletePostResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusNoContent:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body DeletePostUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("postings", "delete_post", err)
			}
			err = ValidateDeletePostUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("postings", "delete_post", err)
			}
			return nil, NewDeletePostUnauthorized(&body)
		case http.StatusInternalServerError:
			var (
				body DeletePostInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("postings", "delete_post", err)
			}
			err = ValidateDeletePostInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("postings", "delete_post", err)
			}
			return nil, NewDeletePostInternal(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("postings", "delete_post", resp.StatusCode, string(body))
		}
	}
}

// BuildEditPostRequest instantiates a HTTP request object with method and path
// set to call the "postings" service "edit_post" endpoint
func (c *Client) BuildEditPostRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		postID string
	)
	{
		p, ok := v.(*postings.EditPostPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("postings", "edit_post", "*postings.EditPostPayload", v)
		}
		postID = p.PostID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: EditPostPostingsPath(postID)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("postings", "edit_post", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeEditPostRequest returns an encoder for requests sent to the postings
// edit_post server.
func EncodeEditPostRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*postings.EditPostPayload)
		if !ok {
			return goahttp.ErrInvalidType("postings", "edit_post", "*postings.EditPostPayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		values := req.URL.Query()
		if p.Title != nil {
			values.Add("title", *p.Title)
		}
		if p.Description != nil {
			values.Add("description", *p.Description)
		}
		if p.Price != nil {
			values.Add("price", *p.Price)
		}
		if p.Medium != nil {
			values.Add("medium", *p.Medium)
		}
		if p.Sold != nil {
			values.Add("sold", fmt.Sprintf("%v", *p.Sold))
		}
		if p.Deliverytype != nil {
			values.Add("deliverytype", *p.Deliverytype)
		}
		if p.ImageID != nil {
			values.Add("imageID", *p.ImageID)
		}
		req.URL.RawQuery = values.Encode()
		body := NewEditPostRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("postings", "edit_post", err)
		}
		return nil
	}
}

// DecodeEditPostResponse returns a decoder for responses returned by the
// postings edit_post endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeEditPostResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "internal" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeEditPostResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body EditPostResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("postings", "edit_post", err)
			}
			err = ValidateEditPostResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("postings", "edit_post", err)
			}
			res := NewEditPostResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body EditPostUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("postings", "edit_post", err)
			}
			err = ValidateEditPostUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("postings", "edit_post", err)
			}
			return nil, NewEditPostUnauthorized(&body)
		case http.StatusInternalServerError:
			var (
				body EditPostInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("postings", "edit_post", err)
			}
			err = ValidateEditPostInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("postings", "edit_post", err)
			}
			return nil, NewEditPostInternal(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("postings", "edit_post", resp.StatusCode, string(body))
		}
	}
}

// BuildGetPostPageRequest instantiates a HTTP request object with method and
// path set to call the "postings" service "get_post_page" endpoint
func (c *Client) BuildGetPostPageRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		page int
	)
	{
		p, ok := v.(*postings.GetPostPagePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("postings", "get_post_page", "*postings.GetPostPagePayload", v)
		}
		page = p.Page
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetPostPagePostingsPath(page)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("postings", "get_post_page", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetPostPageResponse returns a decoder for responses returned by the
// postings get_post_page endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeGetPostPageResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "internal" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeGetPostPageResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetPostPageResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("postings", "get_post_page", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidatePostResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("postings", "get_post_page", err)
			}
			res := NewGetPostPageResultOK(body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetPostPageUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("postings", "get_post_page", err)
			}
			err = ValidateGetPostPageUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("postings", "get_post_page", err)
			}
			return nil, NewGetPostPageUnauthorized(&body)
		case http.StatusInternalServerError:
			var (
				body GetPostPageInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("postings", "get_post_page", err)
			}
			err = ValidateGetPostPageInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("postings", "get_post_page", err)
			}
			return nil, NewGetPostPageInternal(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("postings", "get_post_page", resp.StatusCode, string(body))
		}
	}
}

// BuildGetArtistPostPageRequest instantiates a HTTP request object with method
// and path set to call the "postings" service "get_artist_post_page" endpoint
func (c *Client) BuildGetArtistPostPageRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		page int
	)
	{
		p, ok := v.(*postings.GetArtistPostPagePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("postings", "get_artist_post_page", "*postings.GetArtistPostPagePayload", v)
		}
		page = p.Page
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetArtistPostPagePostingsPath(page)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("postings", "get_artist_post_page", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetArtistPostPageRequest returns an encoder for requests sent to the
// postings get_artist_post_page server.
func EncodeGetArtistPostPageRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*postings.GetArtistPostPagePayload)
		if !ok {
			return goahttp.ErrInvalidType("postings", "get_artist_post_page", "*postings.GetArtistPostPagePayload", v)
		}
		values := req.URL.Query()
		values.Add("userID", p.UserID)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetArtistPostPageResponse returns a decoder for responses returned by
// the postings get_artist_post_page endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetArtistPostPageResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "internal" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeGetArtistPostPageResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetArtistPostPageResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("postings", "get_artist_post_page", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidatePostResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("postings", "get_artist_post_page", err)
			}
			res := NewGetArtistPostPageResultOK(body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetArtistPostPageUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("postings", "get_artist_post_page", err)
			}
			err = ValidateGetArtistPostPageUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("postings", "get_artist_post_page", err)
			}
			return nil, NewGetArtistPostPageUnauthorized(&body)
		case http.StatusInternalServerError:
			var (
				body GetArtistPostPageInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("postings", "get_artist_post_page", err)
			}
			err = ValidateGetArtistPostPageInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("postings", "get_artist_post_page", err)
			}
			return nil, NewGetArtistPostPageInternal(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("postings", "get_artist_post_page", resp.StatusCode, string(body))
		}
	}
}

// BuildGetPostPageFilteredRequest instantiates a HTTP request object with
// method and path set to call the "postings" service "get_post_page_filtered"
// endpoint
func (c *Client) BuildGetPostPageFilteredRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		page int
	)
	{
		p, ok := v.(*postings.GetPostPageFilteredPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("postings", "get_post_page_filtered", "*postings.GetPostPageFilteredPayload", v)
		}
		page = p.Page
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetPostPageFilteredPostingsPath(page)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("postings", "get_post_page_filtered", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetPostPageFilteredRequest returns an encoder for requests sent to the
// postings get_post_page_filtered server.
func EncodeGetPostPageFilteredRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*postings.GetPostPageFilteredPayload)
		if !ok {
			return goahttp.ErrInvalidType("postings", "get_post_page_filtered", "*postings.GetPostPageFilteredPayload", v)
		}
		values := req.URL.Query()
		if p.Keyword != nil {
			values.Add("keyword", *p.Keyword)
		}
		if p.StartDate != nil {
			values.Add("startDate", *p.StartDate)
		}
		if p.EndDate != nil {
			values.Add("endDate", *p.EndDate)
		}
		if p.Medium != nil {
			values.Add("medium", *p.Medium)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetPostPageFilteredResponse returns a decoder for responses returned
// by the postings get_post_page_filtered endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeGetPostPageFilteredResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "internal" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeGetPostPageFilteredResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetPostPageFilteredResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("postings", "get_post_page_filtered", err)
			}
			for _, e := range body {
				if e != nil {
					if err2 := ValidatePostResponse(e); err2 != nil {
						err = goa.MergeErrors(err, err2)
					}
				}
			}
			if err != nil {
				return nil, goahttp.ErrValidationError("postings", "get_post_page_filtered", err)
			}
			res := NewGetPostPageFilteredResultOK(body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetPostPageFilteredUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("postings", "get_post_page_filtered", err)
			}
			err = ValidateGetPostPageFilteredUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("postings", "get_post_page_filtered", err)
			}
			return nil, NewGetPostPageFilteredUnauthorized(&body)
		case http.StatusInternalServerError:
			var (
				body GetPostPageFilteredInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("postings", "get_post_page_filtered", err)
			}
			err = ValidateGetPostPageFilteredInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("postings", "get_post_page_filtered", err)
			}
			return nil, NewGetPostPageFilteredInternal(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("postings", "get_post_page_filtered", resp.StatusCode, string(body))
		}
	}
}

// BuildGetImagesForPostRequest instantiates a HTTP request object with method
// and path set to call the "postings" service "get_images_for_post" endpoint
func (c *Client) BuildGetImagesForPostRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		postID string
	)
	{
		p, ok := v.(*postings.GetImagesForPostPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("postings", "get_images_for_post", "*postings.GetImagesForPostPayload", v)
		}
		postID = p.PostID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetImagesForPostPostingsPath(postID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("postings", "get_images_for_post", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetImagesForPostResponse returns a decoder for responses returned by
// the postings get_images_for_post endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeGetImagesForPostResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - "internal" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeGetImagesForPostResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("postings", "get_images_for_post", err)
			}
			res := NewGetImagesForPostResultOK(body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetImagesForPostUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("postings", "get_images_for_post", err)
			}
			err = ValidateGetImagesForPostUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("postings", "get_images_for_post", err)
			}
			return nil, NewGetImagesForPostUnauthorized(&body)
		case http.StatusInternalServerError:
			var (
				body GetImagesForPostInternalResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("postings", "get_images_for_post", err)
			}
			err = ValidateGetImagesForPostInternalResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("postings", "get_images_for_post", err)
			}
			return nil, NewGetImagesForPostInternal(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("postings", "get_images_for_post", resp.StatusCode, string(body))
		}
	}
}

// unmarshalPostResponseToPostingsPostResponse builds a value of type
// *postings.PostResponse from a value of type *PostResponse.
func unmarshalPostResponseToPostingsPostResponse(v *PostResponse) *postings.PostResponse {
	res := &postings.PostResponse{
		Title:        *v.Title,
		Description:  *v.Description,
		Price:        *v.Price,
		PostID:       *v.PostID,
		Medium:       *v.Medium,
		UploadDate:   *v.UploadDate,
		Sold:         *v.Sold,
		Deliverytype: *v.Deliverytype,
		UserID:       *v.UserID,
		Username:     *v.Username,
	}
	res.ImageIDs = make([]string, len(v.ImageIDs))
	for i, val := range v.ImageIDs {
		res.ImageIDs[i] = val
	}

	return res
}
