// Code generated by goa v3.10.2, DO NOT EDIT.
//
// postings HTTP server encoders and decoders
//
// Command:
// $ goa gen backend/design

package server

import (
	postings "backend/gen/postings"
	"context"
	"io"
	"net/http"
	"strconv"
	"strings"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCreatePostResponse returns an encoder for responses returned by the
// postings create_post endpoint.
func EncodeCreatePostResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*postings.CreatePostResult)
		enc := encoder(ctx, w)
		body := NewCreatePostResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreatePostRequest returns a decoder for requests sent to the postings
// create_post endpoint.
func DecodeCreatePostRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreatePostRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreatePostRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			token string
		)
		token = r.Header.Get("Authorization")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewCreatePostPayload(&body, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}

		return payload, nil
	}
}

// EncodeDeletePostResponse returns an encoder for responses returned by the
// postings delete_post endpoint.
func EncodeDeletePostResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeDeletePostRequest returns a decoder for requests sent to the postings
// delete_post endpoint.
func DecodeDeletePostRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			postID string
			token  string
			err    error

			params = mux.Vars(r)
		)
		postID = params["postID"]
		token = r.Header.Get("Authorization")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeletePostPayload(postID, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}

		return payload, nil
	}
}

// EncodeEditPostResponse returns an encoder for responses returned by the
// postings edit_post endpoint.
func EncodeEditPostResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*postings.EditPostResult)
		enc := encoder(ctx, w)
		body := NewEditPostResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeEditPostRequest returns a decoder for requests sent to the postings
// edit_post endpoint.
func DecodeEditPostRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			postID       string
			title        *string
			description  *string
			price        *string
			content      *string
			medium       *string
			sold         *bool
			deliverytype *string
			imageID      *string
			token        string
			err          error

			params = mux.Vars(r)
		)
		postID = params["postID"]
		titleRaw := r.URL.Query().Get("title")
		if titleRaw != "" {
			title = &titleRaw
		}
		descriptionRaw := r.URL.Query().Get("description")
		if descriptionRaw != "" {
			description = &descriptionRaw
		}
		priceRaw := r.URL.Query().Get("price")
		if priceRaw != "" {
			price = &priceRaw
		}
		contentRaw := r.URL.Query().Get("content")
		if contentRaw != "" {
			content = &contentRaw
		}
		mediumRaw := r.URL.Query().Get("medium")
		if mediumRaw != "" {
			medium = &mediumRaw
		}
		{
			soldRaw := r.URL.Query().Get("sold")
			if soldRaw != "" {
				v, err2 := strconv.ParseBool(soldRaw)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("sold", soldRaw, "boolean"))
				}
				sold = &v
			}
		}
		deliverytypeRaw := r.URL.Query().Get("deliverytype")
		if deliverytypeRaw != "" {
			deliverytype = &deliverytypeRaw
		}
		imageIDRaw := r.URL.Query().Get("imageID")
		if imageIDRaw != "" {
			imageID = &imageIDRaw
		}
		token = r.Header.Get("Authorization")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewEditPostPayload(postID, title, description, price, content, medium, sold, deliverytype, imageID, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}

		return payload, nil
	}
}

// EncodeGetPostPageResponse returns an encoder for responses returned by the
// postings get_post_page endpoint.
func EncodeGetPostPageResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*postings.GetPostPageResult)
		enc := encoder(ctx, w)
		body := NewGetPostPageResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetPostPageRequest returns a decoder for requests sent to the postings
// get_post_page endpoint.
func DecodeGetPostPageRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			page int
			err  error

			params = mux.Vars(r)
		)
		{
			pageRaw := params["page"]
			v, err2 := strconv.ParseInt(pageRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "integer"))
			}
			page = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetPostPagePayload(page)

		return payload, nil
	}
}

// EncodeGetArtistPostPageResponse returns an encoder for responses returned by
// the postings get_artist_post_page endpoint.
func EncodeGetArtistPostPageResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*postings.GetArtistPostPageResult)
		enc := encoder(ctx, w)
		body := NewGetArtistPostPageResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetArtistPostPageRequest returns a decoder for requests sent to the
// postings get_artist_post_page endpoint.
func DecodeGetArtistPostPageRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			page   int
			userID string
			err    error

			params = mux.Vars(r)
		)
		{
			pageRaw := params["page"]
			v, err2 := strconv.ParseInt(pageRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "integer"))
			}
			page = int(v)
		}
		userID = r.URL.Query().Get("userID")
		if userID == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("userID", "query string"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetArtistPostPagePayload(page, userID)

		return payload, nil
	}
}

// EncodeGetPostPageFilteredResponse returns an encoder for responses returned
// by the postings get_post_page_filtered endpoint.
func EncodeGetPostPageFilteredResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*postings.GetPostPageFilteredResult)
		enc := encoder(ctx, w)
		body := NewGetPostPageFilteredResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetPostPageFilteredRequest returns a decoder for requests sent to the
// postings get_post_page_filtered endpoint.
func DecodeGetPostPageFilteredRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			page      int
			keyword   *string
			startDate *string
			endDate   *string
			medium    *string
			err       error

			params = mux.Vars(r)
		)
		{
			pageRaw := params["page"]
			v, err2 := strconv.ParseInt(pageRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "integer"))
			}
			page = int(v)
		}
		keywordRaw := r.URL.Query().Get("keyword")
		if keywordRaw != "" {
			keyword = &keywordRaw
		}
		startDateRaw := r.URL.Query().Get("startDate")
		if startDateRaw != "" {
			startDate = &startDateRaw
		}
		endDateRaw := r.URL.Query().Get("endDate")
		if endDateRaw != "" {
			endDate = &endDateRaw
		}
		mediumRaw := r.URL.Query().Get("medium")
		if mediumRaw != "" {
			medium = &mediumRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetPostPageFilteredPayload(page, keyword, startDate, endDate, medium)

		return payload, nil
	}
}

// EncodeGetImagesForPostResponse returns an encoder for responses returned by
// the postings get_images_for_post endpoint.
func EncodeGetImagesForPostResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*postings.GetImagesForPostResult)
		enc := encoder(ctx, w)
		body := res.Images
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetImagesForPostRequest returns a decoder for requests sent to the
// postings get_images_for_post endpoint.
func DecodeGetImagesForPostRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			postID string

			params = mux.Vars(r)
		)
		postID = params["postID"]
		payload := NewGetImagesForPostPayload(postID)

		return payload, nil
	}
}

// marshalPostingsPostResponseToPostResponse builds a value of type
// *PostResponse from a value of type *postings.PostResponse.
func marshalPostingsPostResponseToPostResponse(v *postings.PostResponse) *PostResponse {
	res := &PostResponse{
		Title:        v.Title,
		Description:  v.Description,
		Price:        v.Price,
		PostID:       v.PostID,
		Medium:       v.Medium,
		UploadDate:   v.UploadDate,
		Sold:         v.Sold,
		Deliverytype: v.Deliverytype,
		UserID:       v.UserID,
		Username:     v.Username,
	}
	if v.ImageIDs != nil {
		res.ImageIDs = make([]string, len(v.ImageIDs))
		for i, val := range v.ImageIDs {
			res.ImageIDs[i] = val
		}
	}

	return res
}
