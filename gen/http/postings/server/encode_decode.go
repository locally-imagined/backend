// Code generated by goa v3.10.2, DO NOT EDIT.
//
// postings HTTP server encoders and decoders
//
// Command:
// $ goa gen backend/design

package server

import (
	postings "backend/gen/postings"
	"context"
	"io"
	"net/http"
	"strconv"
	"strings"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCreatePostResponse returns an encoder for responses returned by the
// postings create_post endpoint.
func EncodeCreatePostResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*postings.CreatePostResult)
		enc := encoder(ctx, w)
		body := NewCreatePostResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreatePostRequest returns a decoder for requests sent to the postings
// create_post endpoint.
func DecodeCreatePostRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreatePostRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreatePostRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			token string
		)
		token = r.Header.Get("Authorization")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewCreatePostPayload(&body, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}

		return payload, nil
	}
}

// EncodeDeletePostResponse returns an encoder for responses returned by the
// postings delete_post endpoint.
func EncodeDeletePostResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeDeletePostRequest returns a decoder for requests sent to the postings
// delete_post endpoint.
func DecodeDeletePostRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			postID string
			token  string
			err    error

			params = mux.Vars(r)
		)
		postID = params["postID"]
		token = r.Header.Get("Authorization")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeletePostPayload(postID, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}

		return payload, nil
	}
}

// EncodeGetPostPageResponse returns an encoder for responses returned by the
// postings get_post_page endpoint.
func EncodeGetPostPageResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*postings.GetPostPageResult)
		enc := encoder(ctx, w)
		body := NewGetPostPageResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetPostPageRequest returns a decoder for requests sent to the postings
// get_post_page endpoint.
func DecodeGetPostPageRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			page int
			err  error

			params = mux.Vars(r)
		)
		{
			pageRaw := params["page"]
			v, err2 := strconv.ParseInt(pageRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "integer"))
			}
			page = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetPostPagePayload(page)

		return payload, nil
	}
}

// EncodeGetImagesForPostResponse returns an encoder for responses returned by
// the postings get_images_for_post endpoint.
func EncodeGetImagesForPostResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*postings.GetImagesForPostResult)
		enc := encoder(ctx, w)
		body := res.Images
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetImagesForPostRequest returns a decoder for requests sent to the
// postings get_images_for_post endpoint.
func DecodeGetImagesForPostRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			postID string

			params = mux.Vars(r)
		)
		postID = params["postID"]
		payload := NewGetImagesForPostPayload(postID)

		return payload, nil
	}
}

// marshalPostingsPostResponseToPostResponse builds a value of type
// *PostResponse from a value of type *postings.PostResponse.
func marshalPostingsPostResponseToPostResponse(v *postings.PostResponse) *PostResponse {
	res := &PostResponse{
		Title:       v.Title,
		Description: v.Description,
		Price:       v.Price,
		PostID:      v.PostID,
		Medium:      v.Medium,
		UploadDate:  v.UploadDate,
		Sold:        v.Sold,
	}
	if v.ImageIDs != nil {
		res.ImageIDs = make([]string, len(v.ImageIDs))
		for i, val := range v.ImageIDs {
			res.ImageIDs[i] = val
		}
	}

	return res
}
