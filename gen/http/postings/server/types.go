// Code generated by goa v3.10.2, DO NOT EDIT.
//
// postings HTTP server types
//
// Command:
// $ goa gen backend/design

package server

import (
	postings "backend/gen/postings"

	goa "goa.design/goa/v3/pkg"
)

// CreatePostRequestBody is the type of the "postings" service "create_post"
// endpoint HTTP request body.
type CreatePostRequestBody struct {
	// Post title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Post description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Post price
	Price *string `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// Post content
	Content *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
}

// NewCreatePostPayload builds a postings service create_post endpoint payload.
func NewCreatePostPayload(body *CreatePostRequestBody, token string) *postings.CreatePostPayload {
	v := &postings.Post{
		Title:       *body.Title,
		Description: *body.Description,
		Price:       *body.Price,
		Content:     *body.Content,
	}
	res := &postings.CreatePostPayload{
		Post: v,
	}
	res.Token = token

	return res
}

// ValidateCreatePostRequestBody runs the validations defined on
// create_post_request_body
func ValidateCreatePostRequestBody(body *CreatePostRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
	}
	return
}
