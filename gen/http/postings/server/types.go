// Code generated by goa v3.10.2, DO NOT EDIT.
//
// postings HTTP server types
//
// Command:
// $ goa gen backend/design

package server

import (
	postings "backend/gen/postings"

	goa "goa.design/goa/v3/pkg"
)

// CreatePostRequestBody is the type of the "postings" service "create_post"
// endpoint HTTP request body.
type CreatePostRequestBody struct {
	// Post title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Post description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Post price
	Price *string `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// Post content
	Content []string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	// Art type
	Medium *string `form:"medium,omitempty" json:"medium,omitempty" xml:"medium,omitempty"`
	// Delivery type
	Deliverytype *string `form:"deliverytype,omitempty" json:"deliverytype,omitempty" xml:"deliverytype,omitempty"`
}

// CreatePostResponseBody is the type of the "postings" service "create_post"
// endpoint HTTP response body.
type CreatePostResponseBody PostResponseResponseBody

// EditPostResponseBody is the type of the "postings" service "edit_post"
// endpoint HTTP response body.
type EditPostResponseBody PostResponseResponseBody

// GetPostPageResponseBody is the type of the "postings" service
// "get_post_page" endpoint HTTP response body.
type GetPostPageResponseBody []*PostResponse

// GetArtistPostPageResponseBody is the type of the "postings" service
// "get_artist_post_page" endpoint HTTP response body.
type GetArtistPostPageResponseBody []*PostResponse

// PostResponseResponseBody is used to define fields on response body types.
type PostResponseResponseBody struct {
	// Post title
	Title string `form:"title" json:"title" xml:"title"`
	// Post description
	Description string `form:"description" json:"description" xml:"description"`
	// Post price
	Price string `form:"price" json:"price" xml:"price"`
	// Image ID
	ImageIDs []string `form:"imageIDs" json:"imageIDs" xml:"imageIDs"`
	// Post ID
	PostID string `form:"postID" json:"postID" xml:"postID"`
	// Art type
	Medium string `form:"medium" json:"medium" xml:"medium"`
	// Upload Date
	UploadDate string `form:"uploadDate" json:"uploadDate" xml:"uploadDate"`
	// is sold
	Sold bool `form:"sold" json:"sold" xml:"sold"`
	// Delivery type
	Deliverytype string `form:"deliverytype" json:"deliverytype" xml:"deliverytype"`
}

// PostResponse is used to define fields on response body types.
type PostResponse struct {
	// Post title
	Title string `form:"title" json:"title" xml:"title"`
	// Post description
	Description string `form:"description" json:"description" xml:"description"`
	// Post price
	Price string `form:"price" json:"price" xml:"price"`
	// Image ID
	ImageIDs []string `form:"imageIDs" json:"imageIDs" xml:"imageIDs"`
	// Post ID
	PostID string `form:"postID" json:"postID" xml:"postID"`
	// Art type
	Medium string `form:"medium" json:"medium" xml:"medium"`
	// Upload Date
	UploadDate string `form:"uploadDate" json:"uploadDate" xml:"uploadDate"`
	// is sold
	Sold bool `form:"sold" json:"sold" xml:"sold"`
	// Delivery type
	Deliverytype string `form:"deliverytype" json:"deliverytype" xml:"deliverytype"`
}

// NewCreatePostResponseBody builds the HTTP response body from the result of
// the "create_post" endpoint of the "postings" service.
func NewCreatePostResponseBody(res *postings.CreatePostResult) *CreatePostResponseBody {
	body := &CreatePostResponseBody{
		Title:        res.Posted.Title,
		Description:  res.Posted.Description,
		Price:        res.Posted.Price,
		PostID:       res.Posted.PostID,
		Medium:       res.Posted.Medium,
		UploadDate:   res.Posted.UploadDate,
		Sold:         res.Posted.Sold,
		Deliverytype: res.Posted.Deliverytype,
	}
	if res.Posted.ImageIDs != nil {
		body.ImageIDs = make([]string, len(res.Posted.ImageIDs))
		for i, val := range res.Posted.ImageIDs {
			body.ImageIDs[i] = val
		}
	}
	return body
}

// NewEditPostResponseBody builds the HTTP response body from the result of the
// "edit_post" endpoint of the "postings" service.
func NewEditPostResponseBody(res *postings.EditPostResult) *EditPostResponseBody {
	body := &EditPostResponseBody{
		Title:        res.Posted.Title,
		Description:  res.Posted.Description,
		Price:        res.Posted.Price,
		PostID:       res.Posted.PostID,
		Medium:       res.Posted.Medium,
		UploadDate:   res.Posted.UploadDate,
		Sold:         res.Posted.Sold,
		Deliverytype: res.Posted.Deliverytype,
	}
	if res.Posted.ImageIDs != nil {
		body.ImageIDs = make([]string, len(res.Posted.ImageIDs))
		for i, val := range res.Posted.ImageIDs {
			body.ImageIDs[i] = val
		}
	}
	return body
}

// NewGetPostPageResponseBody builds the HTTP response body from the result of
// the "get_post_page" endpoint of the "postings" service.
func NewGetPostPageResponseBody(res *postings.GetPostPageResult) GetPostPageResponseBody {
	body := make([]*PostResponse, len(res.Posts))
	for i, val := range res.Posts {
		body[i] = marshalPostingsPostResponseToPostResponse(val)
	}
	return body
}

// NewGetArtistPostPageResponseBody builds the HTTP response body from the
// result of the "get_artist_post_page" endpoint of the "postings" service.
func NewGetArtistPostPageResponseBody(res *postings.GetArtistPostPageResult) GetArtistPostPageResponseBody {
	body := make([]*PostResponse, len(res.Posts))
	for i, val := range res.Posts {
		body[i] = marshalPostingsPostResponseToPostResponse(val)
	}
	return body
}

// NewCreatePostPayload builds a postings service create_post endpoint payload.
func NewCreatePostPayload(body *CreatePostRequestBody, token string) *postings.CreatePostPayload {
	v := &postings.Post{
		Title:        *body.Title,
		Description:  *body.Description,
		Price:        *body.Price,
		Medium:       *body.Medium,
		Deliverytype: *body.Deliverytype,
	}
	v.Content = make([]string, len(body.Content))
	for i, val := range body.Content {
		v.Content[i] = val
	}
	res := &postings.CreatePostPayload{
		Post: v,
	}
	res.Token = token

	return res
}

// NewDeletePostPayload builds a postings service delete_post endpoint payload.
func NewDeletePostPayload(postID string, token string) *postings.DeletePostPayload {
	v := &postings.DeletePostPayload{}
	v.PostID = postID
	v.Token = token

	return v
}

// NewEditPostPayload builds a postings service edit_post endpoint payload.
func NewEditPostPayload(postID string, title *string, description *string, price *string, content *string, medium *string, sold *bool, imageID *string, token string) *postings.EditPostPayload {
	v := &postings.EditPostPayload{}
	v.PostID = postID
	v.Title = title
	v.Description = description
	v.Price = price
	v.Content = content
	v.Medium = medium
	v.Sold = sold
	v.ImageID = imageID
	v.Token = token

	return v
}

// NewGetPostPagePayload builds a postings service get_post_page endpoint
// payload.
func NewGetPostPagePayload(page int, keyword *string) *postings.GetPostPagePayload {
	v := &postings.GetPostPagePayload{}
	v.Page = page
	v.Keyword = keyword

	return v
}

// NewGetArtistPostPagePayload builds a postings service get_artist_post_page
// endpoint payload.
func NewGetArtistPostPagePayload(page int, token string) *postings.GetArtistPostPagePayload {
	v := &postings.GetArtistPostPagePayload{}
	v.Page = page
	v.Token = token

	return v
}

// NewGetImagesForPostPayload builds a postings service get_images_for_post
// endpoint payload.
func NewGetImagesForPostPayload(postID string) *postings.GetImagesForPostPayload {
	v := &postings.GetImagesForPostPayload{}
	v.PostID = postID

	return v
}

// ValidateCreatePostRequestBody runs the validations defined on
// create_post_request_body
func ValidateCreatePostRequestBody(body *CreatePostRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
	}
	if body.Medium == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("medium", "body"))
	}
	if body.Deliverytype == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deliverytype", "body"))
	}
	return
}
