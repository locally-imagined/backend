// Code generated by goa v3.10.2, DO NOT EDIT.
//
// postings HTTP server types
//
// Command:
// $ goa gen backend/design

package server

import (
	postings "backend/gen/postings"

	goa "goa.design/goa/v3/pkg"
)

// CreatePostRequestBody is the type of the "postings" service "create_post"
// endpoint HTTP request body.
type CreatePostRequestBody struct {
	// Post title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Post description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Post price
	Price *string `form:"price,omitempty" json:"price,omitempty" xml:"price,omitempty"`
	// Post content
	Content []string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	// Art type
	Medium *string `form:"medium,omitempty" json:"medium,omitempty" xml:"medium,omitempty"`
	// Delivery type
	Deliverytype *string `form:"deliverytype,omitempty" json:"deliverytype,omitempty" xml:"deliverytype,omitempty"`
}

// EditPostRequestBody is the type of the "postings" service "edit_post"
// endpoint HTTP request body.
type EditPostRequestBody struct {
	// raw image content
	Content *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
}

// CreatePostResponseBody is the type of the "postings" service "create_post"
// endpoint HTTP response body.
type CreatePostResponseBody PostResponseResponseBody

// EditPostResponseBody is the type of the "postings" service "edit_post"
// endpoint HTTP response body.
type EditPostResponseBody PostResponseResponseBody

// GetPostPageResponseBody is the type of the "postings" service
// "get_post_page" endpoint HTTP response body.
type GetPostPageResponseBody []*PostResponse

// GetArtistPostPageResponseBody is the type of the "postings" service
// "get_artist_post_page" endpoint HTTP response body.
type GetArtistPostPageResponseBody []*PostResponse

// GetPostPageFilteredResponseBody is the type of the "postings" service
// "get_post_page_filtered" endpoint HTTP response body.
type GetPostPageFilteredResponseBody []*PostResponse

// GetArtistsResponseBody is the type of the "postings" service "get_artists"
// endpoint HTTP response body.
type GetArtistsResponseBody []*Artist

// CreatePostUnauthorizedResponseBody is the type of the "postings" service
// "create_post" endpoint HTTP response body for the "unauthorized" error.
type CreatePostUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreatePostInternalResponseBody is the type of the "postings" service
// "create_post" endpoint HTTP response body for the "internal" error.
type CreatePostInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeletePostUnauthorizedResponseBody is the type of the "postings" service
// "delete_post" endpoint HTTP response body for the "unauthorized" error.
type DeletePostUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeletePostInternalResponseBody is the type of the "postings" service
// "delete_post" endpoint HTTP response body for the "internal" error.
type DeletePostInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EditPostUnauthorizedResponseBody is the type of the "postings" service
// "edit_post" endpoint HTTP response body for the "unauthorized" error.
type EditPostUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// EditPostInternalResponseBody is the type of the "postings" service
// "edit_post" endpoint HTTP response body for the "internal" error.
type EditPostInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetPostPageUnauthorizedResponseBody is the type of the "postings" service
// "get_post_page" endpoint HTTP response body for the "unauthorized" error.
type GetPostPageUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetPostPageInternalResponseBody is the type of the "postings" service
// "get_post_page" endpoint HTTP response body for the "internal" error.
type GetPostPageInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetArtistPostPageUnauthorizedResponseBody is the type of the "postings"
// service "get_artist_post_page" endpoint HTTP response body for the
// "unauthorized" error.
type GetArtistPostPageUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetArtistPostPageInternalResponseBody is the type of the "postings" service
// "get_artist_post_page" endpoint HTTP response body for the "internal" error.
type GetArtistPostPageInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetPostPageFilteredUnauthorizedResponseBody is the type of the "postings"
// service "get_post_page_filtered" endpoint HTTP response body for the
// "unauthorized" error.
type GetPostPageFilteredUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetPostPageFilteredInternalResponseBody is the type of the "postings"
// service "get_post_page_filtered" endpoint HTTP response body for the
// "internal" error.
type GetPostPageFilteredInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetImagesForPostUnauthorizedResponseBody is the type of the "postings"
// service "get_images_for_post" endpoint HTTP response body for the
// "unauthorized" error.
type GetImagesForPostUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetImagesForPostInternalResponseBody is the type of the "postings" service
// "get_images_for_post" endpoint HTTP response body for the "internal" error.
type GetImagesForPostInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetArtistsUnauthorizedResponseBody is the type of the "postings" service
// "get_artists" endpoint HTTP response body for the "unauthorized" error.
type GetArtistsUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetArtistsInternalResponseBody is the type of the "postings" service
// "get_artists" endpoint HTTP response body for the "internal" error.
type GetArtistsInternalResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// PostResponseResponseBody is used to define fields on response body types.
type PostResponseResponseBody struct {
	// Post title
	Title string `form:"title" json:"title" xml:"title"`
	// Post description
	Description string `form:"description" json:"description" xml:"description"`
	// Post price
	Price string `form:"price" json:"price" xml:"price"`
	// Image ID
	ImageIDs []string `form:"imageIDs" json:"imageIDs" xml:"imageIDs"`
	// Post ID
	PostID string `form:"postID" json:"postID" xml:"postID"`
	// Art type
	Medium string `form:"medium" json:"medium" xml:"medium"`
	// Upload Date
	UploadDate string `form:"uploadDate" json:"uploadDate" xml:"uploadDate"`
	// is sold
	Sold bool `form:"sold" json:"sold" xml:"sold"`
	// Delivery type
	Deliverytype string `form:"deliverytype" json:"deliverytype" xml:"deliverytype"`
	// User id associated with post
	UserID string `form:"userID" json:"userID" xml:"userID"`
	// prof pic id
	ProfpicID string `form:"profpicID" json:"profpicID" xml:"profpicID"`
	// Username associated with post
	Username string `form:"username" json:"username" xml:"username"`
}

// PostResponse is used to define fields on response body types.
type PostResponse struct {
	// Post title
	Title string `form:"title" json:"title" xml:"title"`
	// Post description
	Description string `form:"description" json:"description" xml:"description"`
	// Post price
	Price string `form:"price" json:"price" xml:"price"`
	// Image ID
	ImageIDs []string `form:"imageIDs" json:"imageIDs" xml:"imageIDs"`
	// Post ID
	PostID string `form:"postID" json:"postID" xml:"postID"`
	// Art type
	Medium string `form:"medium" json:"medium" xml:"medium"`
	// Upload Date
	UploadDate string `form:"uploadDate" json:"uploadDate" xml:"uploadDate"`
	// is sold
	Sold bool `form:"sold" json:"sold" xml:"sold"`
	// Delivery type
	Deliverytype string `form:"deliverytype" json:"deliverytype" xml:"deliverytype"`
	// User id associated with post
	UserID string `form:"userID" json:"userID" xml:"userID"`
	// prof pic id
	ProfpicID string `form:"profpicID" json:"profpicID" xml:"profpicID"`
	// Username associated with post
	Username string `form:"username" json:"username" xml:"username"`
}

// Artist is used to define fields on response body types.
type Artist struct {
	// Artist User ID
	UserID string `form:"userID" json:"userID" xml:"userID"`
	// Artist username
	Username string `form:"username" json:"username" xml:"username"`
	// Artist Profile picture ID
	ProfpicID string `form:"profpicID" json:"profpicID" xml:"profpicID"`
}

// NewCreatePostResponseBody builds the HTTP response body from the result of
// the "create_post" endpoint of the "postings" service.
func NewCreatePostResponseBody(res *postings.CreatePostResult) *CreatePostResponseBody {
	body := &CreatePostResponseBody{
		Title:        res.Posted.Title,
		Description:  res.Posted.Description,
		Price:        res.Posted.Price,
		PostID:       res.Posted.PostID,
		Medium:       res.Posted.Medium,
		UploadDate:   res.Posted.UploadDate,
		Sold:         res.Posted.Sold,
		Deliverytype: res.Posted.Deliverytype,
		UserID:       res.Posted.UserID,
		ProfpicID:    res.Posted.ProfpicID,
		Username:     res.Posted.Username,
	}
	if res.Posted.ImageIDs != nil {
		body.ImageIDs = make([]string, len(res.Posted.ImageIDs))
		for i, val := range res.Posted.ImageIDs {
			body.ImageIDs[i] = val
		}
	}
	return body
}

// NewEditPostResponseBody builds the HTTP response body from the result of the
// "edit_post" endpoint of the "postings" service.
func NewEditPostResponseBody(res *postings.EditPostResult) *EditPostResponseBody {
	body := &EditPostResponseBody{
		Title:        res.Posted.Title,
		Description:  res.Posted.Description,
		Price:        res.Posted.Price,
		PostID:       res.Posted.PostID,
		Medium:       res.Posted.Medium,
		UploadDate:   res.Posted.UploadDate,
		Sold:         res.Posted.Sold,
		Deliverytype: res.Posted.Deliverytype,
		UserID:       res.Posted.UserID,
		ProfpicID:    res.Posted.ProfpicID,
		Username:     res.Posted.Username,
	}
	if res.Posted.ImageIDs != nil {
		body.ImageIDs = make([]string, len(res.Posted.ImageIDs))
		for i, val := range res.Posted.ImageIDs {
			body.ImageIDs[i] = val
		}
	}
	return body
}

// NewGetPostPageResponseBody builds the HTTP response body from the result of
// the "get_post_page" endpoint of the "postings" service.
func NewGetPostPageResponseBody(res *postings.GetPostPageResult) GetPostPageResponseBody {
	body := make([]*PostResponse, len(res.Posts))
	for i, val := range res.Posts {
		body[i] = marshalPostingsPostResponseToPostResponse(val)
	}
	return body
}

// NewGetArtistPostPageResponseBody builds the HTTP response body from the
// result of the "get_artist_post_page" endpoint of the "postings" service.
func NewGetArtistPostPageResponseBody(res *postings.GetArtistPostPageResult) GetArtistPostPageResponseBody {
	body := make([]*PostResponse, len(res.Posts))
	for i, val := range res.Posts {
		body[i] = marshalPostingsPostResponseToPostResponse(val)
	}
	return body
}

// NewGetPostPageFilteredResponseBody builds the HTTP response body from the
// result of the "get_post_page_filtered" endpoint of the "postings" service.
func NewGetPostPageFilteredResponseBody(res *postings.GetPostPageFilteredResult) GetPostPageFilteredResponseBody {
	body := make([]*PostResponse, len(res.Posts))
	for i, val := range res.Posts {
		body[i] = marshalPostingsPostResponseToPostResponse(val)
	}
	return body
}

// NewGetArtistsResponseBody builds the HTTP response body from the result of
// the "get_artists" endpoint of the "postings" service.
func NewGetArtistsResponseBody(res *postings.GetArtistsResult) GetArtistsResponseBody {
	body := make([]*Artist, len(res.Artists))
	for i, val := range res.Artists {
		body[i] = marshalPostingsArtistToArtist(val)
	}
	return body
}

// NewCreatePostUnauthorizedResponseBody builds the HTTP response body from the
// result of the "create_post" endpoint of the "postings" service.
func NewCreatePostUnauthorizedResponseBody(res *goa.ServiceError) *CreatePostUnauthorizedResponseBody {
	body := &CreatePostUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatePostInternalResponseBody builds the HTTP response body from the
// result of the "create_post" endpoint of the "postings" service.
func NewCreatePostInternalResponseBody(res *goa.ServiceError) *CreatePostInternalResponseBody {
	body := &CreatePostInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeletePostUnauthorizedResponseBody builds the HTTP response body from the
// result of the "delete_post" endpoint of the "postings" service.
func NewDeletePostUnauthorizedResponseBody(res *goa.ServiceError) *DeletePostUnauthorizedResponseBody {
	body := &DeletePostUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeletePostInternalResponseBody builds the HTTP response body from the
// result of the "delete_post" endpoint of the "postings" service.
func NewDeletePostInternalResponseBody(res *goa.ServiceError) *DeletePostInternalResponseBody {
	body := &DeletePostInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewEditPostUnauthorizedResponseBody builds the HTTP response body from the
// result of the "edit_post" endpoint of the "postings" service.
func NewEditPostUnauthorizedResponseBody(res *goa.ServiceError) *EditPostUnauthorizedResponseBody {
	body := &EditPostUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewEditPostInternalResponseBody builds the HTTP response body from the
// result of the "edit_post" endpoint of the "postings" service.
func NewEditPostInternalResponseBody(res *goa.ServiceError) *EditPostInternalResponseBody {
	body := &EditPostInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPostPageUnauthorizedResponseBody builds the HTTP response body from
// the result of the "get_post_page" endpoint of the "postings" service.
func NewGetPostPageUnauthorizedResponseBody(res *goa.ServiceError) *GetPostPageUnauthorizedResponseBody {
	body := &GetPostPageUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPostPageInternalResponseBody builds the HTTP response body from the
// result of the "get_post_page" endpoint of the "postings" service.
func NewGetPostPageInternalResponseBody(res *goa.ServiceError) *GetPostPageInternalResponseBody {
	body := &GetPostPageInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetArtistPostPageUnauthorizedResponseBody builds the HTTP response body
// from the result of the "get_artist_post_page" endpoint of the "postings"
// service.
func NewGetArtistPostPageUnauthorizedResponseBody(res *goa.ServiceError) *GetArtistPostPageUnauthorizedResponseBody {
	body := &GetArtistPostPageUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetArtistPostPageInternalResponseBody builds the HTTP response body from
// the result of the "get_artist_post_page" endpoint of the "postings" service.
func NewGetArtistPostPageInternalResponseBody(res *goa.ServiceError) *GetArtistPostPageInternalResponseBody {
	body := &GetArtistPostPageInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPostPageFilteredUnauthorizedResponseBody builds the HTTP response body
// from the result of the "get_post_page_filtered" endpoint of the "postings"
// service.
func NewGetPostPageFilteredUnauthorizedResponseBody(res *goa.ServiceError) *GetPostPageFilteredUnauthorizedResponseBody {
	body := &GetPostPageFilteredUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPostPageFilteredInternalResponseBody builds the HTTP response body
// from the result of the "get_post_page_filtered" endpoint of the "postings"
// service.
func NewGetPostPageFilteredInternalResponseBody(res *goa.ServiceError) *GetPostPageFilteredInternalResponseBody {
	body := &GetPostPageFilteredInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetImagesForPostUnauthorizedResponseBody builds the HTTP response body
// from the result of the "get_images_for_post" endpoint of the "postings"
// service.
func NewGetImagesForPostUnauthorizedResponseBody(res *goa.ServiceError) *GetImagesForPostUnauthorizedResponseBody {
	body := &GetImagesForPostUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetImagesForPostInternalResponseBody builds the HTTP response body from
// the result of the "get_images_for_post" endpoint of the "postings" service.
func NewGetImagesForPostInternalResponseBody(res *goa.ServiceError) *GetImagesForPostInternalResponseBody {
	body := &GetImagesForPostInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetArtistsUnauthorizedResponseBody builds the HTTP response body from the
// result of the "get_artists" endpoint of the "postings" service.
func NewGetArtistsUnauthorizedResponseBody(res *goa.ServiceError) *GetArtistsUnauthorizedResponseBody {
	body := &GetArtistsUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetArtistsInternalResponseBody builds the HTTP response body from the
// result of the "get_artists" endpoint of the "postings" service.
func NewGetArtistsInternalResponseBody(res *goa.ServiceError) *GetArtistsInternalResponseBody {
	body := &GetArtistsInternalResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatePostPayload builds a postings service create_post endpoint payload.
func NewCreatePostPayload(body *CreatePostRequestBody, token string) *postings.CreatePostPayload {
	v := &postings.Post{
		Title:        *body.Title,
		Description:  *body.Description,
		Price:        *body.Price,
		Medium:       *body.Medium,
		Deliverytype: *body.Deliverytype,
	}
	v.Content = make([]string, len(body.Content))
	for i, val := range body.Content {
		v.Content[i] = val
	}
	res := &postings.CreatePostPayload{
		Post: v,
	}
	res.Token = token

	return res
}

// NewDeletePostPayload builds a postings service delete_post endpoint payload.
func NewDeletePostPayload(postID string, token string) *postings.DeletePostPayload {
	v := &postings.DeletePostPayload{}
	v.PostID = postID
	v.Token = token

	return v
}

// NewEditPostPayload builds a postings service edit_post endpoint payload.
func NewEditPostPayload(body *EditPostRequestBody, postID string, title *string, description *string, price *string, medium *string, sold *bool, deliverytype *string, imageID *string, token string) *postings.EditPostPayload {
	v := &postings.Content{
		Content: body.Content,
	}
	res := &postings.EditPostPayload{
		Content: v,
	}
	res.PostID = postID
	res.Title = title
	res.Description = description
	res.Price = price
	res.Medium = medium
	res.Sold = sold
	res.Deliverytype = deliverytype
	res.ImageID = imageID
	res.Token = token

	return res
}

// NewGetPostPagePayload builds a postings service get_post_page endpoint
// payload.
func NewGetPostPagePayload(page int) *postings.GetPostPagePayload {
	v := &postings.GetPostPagePayload{}
	v.Page = page

	return v
}

// NewGetArtistPostPagePayload builds a postings service get_artist_post_page
// endpoint payload.
func NewGetArtistPostPagePayload(page int, userID string) *postings.GetArtistPostPagePayload {
	v := &postings.GetArtistPostPagePayload{}
	v.Page = page
	v.UserID = userID

	return v
}

// NewGetPostPageFilteredPayload builds a postings service
// get_post_page_filtered endpoint payload.
func NewGetPostPageFilteredPayload(page int, keyword *string, startDate *string, endDate *string, medium *string) *postings.GetPostPageFilteredPayload {
	v := &postings.GetPostPageFilteredPayload{}
	v.Page = page
	v.Keyword = keyword
	v.StartDate = startDate
	v.EndDate = endDate
	v.Medium = medium

	return v
}

// NewGetImagesForPostPayload builds a postings service get_images_for_post
// endpoint payload.
func NewGetImagesForPostPayload(postID string) *postings.GetImagesForPostPayload {
	v := &postings.GetImagesForPostPayload{}
	v.PostID = postID

	return v
}

// NewGetArtistsPayload builds a postings service get_artists endpoint payload.
func NewGetArtistsPayload(page int) *postings.GetArtistsPayload {
	v := &postings.GetArtistsPayload{}
	v.Page = page

	return v
}

// ValidateCreatePostRequestBody runs the validations defined on
// create_post_request_body
func ValidateCreatePostRequestBody(body *CreatePostRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Price == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("price", "body"))
	}
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
	}
	if body.Medium == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("medium", "body"))
	}
	if body.Deliverytype == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("deliverytype", "body"))
	}
	return
}
