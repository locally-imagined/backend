// Code generated by goa v3.10.2, DO NOT EDIT.
//
// postings HTTP server
//
// Command:
// $ goa gen backend/design

package server

import (
	postings "backend/gen/postings"
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
	"goa.design/plugins/v3/cors"
)

// Server lists the postings service endpoint HTTP handlers.
type Server struct {
	Mounts           []*MountPoint
	CreatePost       http.Handler
	DeletePost       http.Handler
	EditPost         http.Handler
	GetPostPage      http.Handler
	GetImagesForPost http.Handler
	CORS             http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the postings service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *postings.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"CreatePost", "POST", "/posts/create"},
			{"DeletePost", "DELETE", "/posts/delete/{postID}"},
			{"EditPost", "PUT", "/posts/edit/{postID}"},
			{"GetPostPage", "GET", "/posts/getpage/{page}"},
			{"GetImagesForPost", "GET", "/posts/getimages/{postID}"},
			{"CORS", "OPTIONS", "/posts/create"},
			{"CORS", "OPTIONS", "/posts/delete/{postID}"},
			{"CORS", "OPTIONS", "/posts/edit/{postID}"},
			{"CORS", "OPTIONS", "/posts/getpage/{page}"},
			{"CORS", "OPTIONS", "/posts/getimages/{postID}"},
		},
		CreatePost:       NewCreatePostHandler(e.CreatePost, mux, decoder, encoder, errhandler, formatter),
		DeletePost:       NewDeletePostHandler(e.DeletePost, mux, decoder, encoder, errhandler, formatter),
		EditPost:         NewEditPostHandler(e.EditPost, mux, decoder, encoder, errhandler, formatter),
		GetPostPage:      NewGetPostPageHandler(e.GetPostPage, mux, decoder, encoder, errhandler, formatter),
		GetImagesForPost: NewGetImagesForPostHandler(e.GetImagesForPost, mux, decoder, encoder, errhandler, formatter),
		CORS:             NewCORSHandler(),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "postings" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.CreatePost = m(s.CreatePost)
	s.DeletePost = m(s.DeletePost)
	s.EditPost = m(s.EditPost)
	s.GetPostPage = m(s.GetPostPage)
	s.GetImagesForPost = m(s.GetImagesForPost)
	s.CORS = m(s.CORS)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return postings.MethodNames[:] }

// Mount configures the mux to serve the postings endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountCreatePostHandler(mux, h.CreatePost)
	MountDeletePostHandler(mux, h.DeletePost)
	MountEditPostHandler(mux, h.EditPost)
	MountGetPostPageHandler(mux, h.GetPostPage)
	MountGetImagesForPostHandler(mux, h.GetImagesForPost)
	MountCORSHandler(mux, h.CORS)
}

// Mount configures the mux to serve the postings endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountCreatePostHandler configures the mux to serve the "postings" service
// "create_post" endpoint.
func MountCreatePostHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandlePostingsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/posts/create", f)
}

// NewCreatePostHandler creates a HTTP handler which loads the HTTP request and
// calls the "postings" service "create_post" endpoint.
func NewCreatePostHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreatePostRequest(mux, decoder)
		encodeResponse = EncodeCreatePostResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create_post")
		ctx = context.WithValue(ctx, goa.ServiceKey, "postings")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeletePostHandler configures the mux to serve the "postings" service
// "delete_post" endpoint.
func MountDeletePostHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandlePostingsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/posts/delete/{postID}", f)
}

// NewDeletePostHandler creates a HTTP handler which loads the HTTP request and
// calls the "postings" service "delete_post" endpoint.
func NewDeletePostHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeletePostRequest(mux, decoder)
		encodeResponse = EncodeDeletePostResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "delete_post")
		ctx = context.WithValue(ctx, goa.ServiceKey, "postings")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountEditPostHandler configures the mux to serve the "postings" service
// "edit_post" endpoint.
func MountEditPostHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandlePostingsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/posts/edit/{postID}", f)
}

// NewEditPostHandler creates a HTTP handler which loads the HTTP request and
// calls the "postings" service "edit_post" endpoint.
func NewEditPostHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeEditPostRequest(mux, decoder)
		encodeResponse = EncodeEditPostResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "edit_post")
		ctx = context.WithValue(ctx, goa.ServiceKey, "postings")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetPostPageHandler configures the mux to serve the "postings" service
// "get_post_page" endpoint.
func MountGetPostPageHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandlePostingsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/posts/getpage/{page}", f)
}

// NewGetPostPageHandler creates a HTTP handler which loads the HTTP request
// and calls the "postings" service "get_post_page" endpoint.
func NewGetPostPageHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetPostPageRequest(mux, decoder)
		encodeResponse = EncodeGetPostPageResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get_post_page")
		ctx = context.WithValue(ctx, goa.ServiceKey, "postings")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetImagesForPostHandler configures the mux to serve the "postings"
// service "get_images_for_post" endpoint.
func MountGetImagesForPostHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := HandlePostingsOrigin(h).(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/posts/getimages/{postID}", f)
}

// NewGetImagesForPostHandler creates a HTTP handler which loads the HTTP
// request and calls the "postings" service "get_images_for_post" endpoint.
func NewGetImagesForPostHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetImagesForPostRequest(mux, decoder)
		encodeResponse = EncodeGetImagesForPostResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get_images_for_post")
		ctx = context.WithValue(ctx, goa.ServiceKey, "postings")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCORSHandler configures the mux to serve the CORS endpoints for the
// service postings.
func MountCORSHandler(mux goahttp.Muxer, h http.Handler) {
	h = HandlePostingsOrigin(h)
	mux.Handle("OPTIONS", "/posts/create", h.ServeHTTP)
	mux.Handle("OPTIONS", "/posts/delete/{postID}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/posts/edit/{postID}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/posts/getpage/{page}", h.ServeHTTP)
	mux.Handle("OPTIONS", "/posts/getimages/{postID}", h.ServeHTTP)
}

// NewCORSHandler creates a HTTP handler which returns a simple 200 response.
func NewCORSHandler() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(200)
	})
}

// HandlePostingsOrigin applies the CORS response headers corresponding to the
// origin for the service postings.
func HandlePostingsOrigin(h http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		origin := r.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "http://localhost:3000") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Expose-Headers", "*")
			w.Header().Set("Access-Control-Max-Age", "600")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT, OPTIONS")
				w.Header().Set("Access-Control-Allow-Headers", "*")
			}
			h.ServeHTTP(w, r)
			return
		}
		if cors.MatchOrigin(origin, "http://localhost:3001") {
			w.Header().Set("Access-Control-Allow-Origin", origin)
			w.Header().Set("Vary", "Origin")
			w.Header().Set("Access-Control-Expose-Headers", "*")
			w.Header().Set("Access-Control-Max-Age", "600")
			w.Header().Set("Access-Control-Allow-Credentials", "true")
			if acrm := r.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				w.Header().Set("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT, OPTIONS")
				w.Header().Set("Access-Control-Allow-Headers", "*")
			}
			h.ServeHTTP(w, r)
			return
		}
		h.ServeHTTP(w, r)
		return
	})
}
