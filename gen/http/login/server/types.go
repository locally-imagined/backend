// Code generated by goa v3.10.2, DO NOT EDIT.
//
// login HTTP server types
//
// Command:
// $ goa gen backend/design

package server

import (
	login "backend/gen/login"

	goa "goa.design/goa/v3/pkg"
)

// LoginResponseBody is the type of the "login" service "Login" endpoint HTTP
// response body.
type LoginResponseBody LoginResponseResponseBody

// LoginUnauthorizedResponseBody is the type of the "login" service "Login"
// endpoint HTTP response body for the "unauthorized" error.
type LoginUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginResponseResponseBody is used to define fields on response body types.
type LoginResponseResponseBody struct {
	// jwt used for future authentication
	JWT *string `form:"jwt,omitempty" json:"jwt,omitempty" xml:"jwt,omitempty"`
	// users ID
	UserID *string `form:"userID,omitempty" json:"userID,omitempty" xml:"userID,omitempty"`
	// profile pic ID
	ProfpicID *string `form:"profpicID,omitempty" json:"profpicID,omitempty" xml:"profpicID,omitempty"`
}

// NewLoginResponseBody builds the HTTP response body from the result of the
// "Login" endpoint of the "login" service.
func NewLoginResponseBody(res *login.LoginResult) *LoginResponseBody {
	body := &LoginResponseBody{
		JWT:       res.LoginResponse.JWT,
		UserID:    res.LoginResponse.UserID,
		ProfpicID: res.LoginResponse.ProfpicID,
	}
	return body
}

// NewLoginUnauthorizedResponseBody builds the HTTP response body from the
// result of the "Login" endpoint of the "login" service.
func NewLoginUnauthorizedResponseBody(res *goa.ServiceError) *LoginUnauthorizedResponseBody {
	body := &LoginUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginPayload builds a login service Login endpoint payload.
func NewLoginPayload() *login.LoginPayload {
	v := &login.LoginPayload{}

	return v
}
