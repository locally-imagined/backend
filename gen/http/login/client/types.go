// Code generated by goa v3.10.2, DO NOT EDIT.
//
// login HTTP client types
//
// Command:
// $ goa gen backend/design

package client

import (
	login "backend/gen/login"

	goa "goa.design/goa/v3/pkg"
)

// LoginResponseBody is the type of the "login" service "Login" endpoint HTTP
// response body.
type LoginResponseBody LoginResponseResponseBody

// LoginUnauthorizedResponseBody is the type of the "login" service "Login"
// endpoint HTTP response body for the "unauthorized" error.
type LoginUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// LoginResponseResponseBody is used to define fields on response body types.
type LoginResponseResponseBody struct {
	// jwt used for future authentication
	JWT *string `form:"jwt,omitempty" json:"jwt,omitempty" xml:"jwt,omitempty"`
	// users ID
	UserID *string `form:"userID,omitempty" json:"userID,omitempty" xml:"userID,omitempty"`
}

// NewLoginResultOK builds a "login" service "Login" endpoint result from a
// HTTP "OK" response.
func NewLoginResultOK(body *LoginResponseBody) *login.LoginResult {
	v := &login.LoginResponse{
		JWT:    body.JWT,
		UserID: body.UserID,
	}
	res := &login.LoginResult{
		LoginResponse: v,
	}

	return res
}

// NewLoginUnauthorized builds a login service Login endpoint unauthorized
// error.
func NewLoginUnauthorized(body *LoginUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateLoginUnauthorizedResponseBody runs the validations defined on
// Login_unauthorized_Response_Body
func ValidateLoginUnauthorizedResponseBody(body *LoginUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
