// Code generated by goa v3.10.1, DO NOT EDIT.
//
// upload HTTP server encoders and decoders
//
// Command:
// $ goa gen backend/design

package server

import (
	upload "backend/gen/upload"
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
)

// EncodeUploadPhotoResponse returns an encoder for responses returned by the
// upload upload_photo endpoint.
func EncodeUploadPhotoResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*upload.UploadPhotoResult)
		enc := encoder(ctx, w)
		body := res.Success
		if res.AccessControlAllowOrigin != nil {
			w.Header().Set("Access-Control-Allow-Origin", *res.AccessControlAllowOrigin)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUploadPhotoRequest returns a decoder for requests sent to the upload
// upload_photo endpoint.
func DecodeUploadPhotoRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			content       []byte
			authorization *string

			params = mux.Vars(r)
		)
		{
			contentRaw := params["content"]
			content = []byte(contentRaw)
		}
		authorizationRaw := r.Header.Get("Authorization")
		if authorizationRaw != "" {
			authorization = &authorizationRaw
		}
		payload := NewUploadPhotoPayload(content, authorization)

		return payload, nil
	}
}
