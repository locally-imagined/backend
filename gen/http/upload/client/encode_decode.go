// Code generated by goa v3.10.2, DO NOT EDIT.
//
// upload HTTP client encoders and decoders
//
// Command:
// $ goa gen backend/design

package client

import (
	upload "backend/gen/upload"
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	goahttp "goa.design/goa/v3/http"
)

// BuildUploadPhotoRequest instantiates a HTTP request object with method and
// path set to call the "upload" service "upload_photo" endpoint
func (c *Client) BuildUploadPhotoRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		content []byte
	)
	{
		p, ok := v.(*upload.UploadPhotoPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("upload", "upload_photo", "*upload.UploadPhotoPayload", v)
		}
		content = p.Content
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UploadPhotoUploadPath(content)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("upload", "upload_photo", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUploadPhotoRequest returns an encoder for requests sent to the upload
// upload_photo server.
func EncodeUploadPhotoRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*upload.UploadPhotoPayload)
		if !ok {
			return goahttp.ErrInvalidType("upload", "upload_photo", "*upload.UploadPhotoPayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		return nil
	}
}

// DecodeUploadPhotoResponse returns a decoder for responses returned by the
// upload upload_photo endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeUploadPhotoResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("upload", "upload_photo", err)
			}
			res := NewUploadPhotoResultOK(body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("upload", "upload_photo", resp.StatusCode, string(body))
		}
	}
}
