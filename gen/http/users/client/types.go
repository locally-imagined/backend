// Code generated by goa v3.10.2, DO NOT EDIT.
//
// users HTTP client types
//
// Command:
// $ goa gen backend/design

package client

import (
	users "backend/gen/users"

	goa "goa.design/goa/v3/pkg"
)

// UpdateBioRequestBody is the type of the "users" service "update_bio"
// endpoint HTTP request body.
type UpdateBioRequestBody struct {
	// New Bio
	Bio *string `form:"bio,omitempty" json:"bio,omitempty" xml:"bio,omitempty"`
}

// UpdateProfilePhotoRequestBody is the type of the "users" service
// "update_profile_photo" endpoint HTTP request body.
type UpdateProfilePhotoRequestBody struct {
	// raw image content
	Content *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
}

// UpdateBioResponseBody is the type of the "users" service "update_bio"
// endpoint HTTP response body.
type UpdateBioResponseBody UserResponseBody

// UpdateProfilePhotoResponseBody is the type of the "users" service
// "update_profile_photo" endpoint HTTP response body.
type UpdateProfilePhotoResponseBody ProfilePhotoResponseBody

// GetContactInfoResponseBody is the type of the "users" service
// "get_contact_info" endpoint HTTP response body.
type GetContactInfoResponseBody UserResponseBody

// UpdateBioUnauthorizedResponseBody is the type of the "users" service
// "update_bio" endpoint HTTP response body for the "unauthorized" error.
type UpdateBioUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateProfilePhotoUnauthorizedResponseBody is the type of the "users"
// service "update_profile_photo" endpoint HTTP response body for the
// "unauthorized" error.
type UpdateProfilePhotoUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetContactInfoUnauthorizedResponseBody is the type of the "users" service
// "get_contact_info" endpoint HTTP response body for the "unauthorized" error.
type GetContactInfoUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// First name
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	// Last name
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
	// Phone number
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// Email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
}

// ProfilePhotoResponseBody is used to define fields on response body types.
type ProfilePhotoResponseBody struct {
	// photo id
	PhotoUUID *string `form:"photo_uuid,omitempty" json:"photo_uuid,omitempty" xml:"photo_uuid,omitempty"`
}

// NewUpdateBioRequestBody builds the HTTP request body from the payload of the
// "update_bio" endpoint of the "users" service.
func NewUpdateBioRequestBody(p *users.UpdateBioPayload) *UpdateBioRequestBody {
	body := &UpdateBioRequestBody{
		Bio: p.Bio.Bio,
	}
	return body
}

// NewUpdateProfilePhotoRequestBody builds the HTTP request body from the
// payload of the "update_profile_photo" endpoint of the "users" service.
func NewUpdateProfilePhotoRequestBody(p *users.UpdateProfilePhotoPayload) *UpdateProfilePhotoRequestBody {
	body := &UpdateProfilePhotoRequestBody{
		Content: p.Content.Content,
	}
	return body
}

// NewUpdateBioResultOK builds a "users" service "update_bio" endpoint result
// from a HTTP "OK" response.
func NewUpdateBioResultOK(body *UpdateBioResponseBody) *users.UpdateBioResult {
	v := &users.User{
		FirstName: *body.FirstName,
		LastName:  *body.LastName,
		Phone:     *body.Phone,
		Email:     *body.Email,
	}
	res := &users.UpdateBioResult{
		UpdatedUser: v,
	}

	return res
}

// NewUpdateBioUnauthorized builds a users service update_bio endpoint
// unauthorized error.
func NewUpdateBioUnauthorized(body *UpdateBioUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateProfilePhotoResultOK builds a "users" service
// "update_profile_photo" endpoint result from a HTTP "OK" response.
func NewUpdateProfilePhotoResultOK(body *UpdateProfilePhotoResponseBody) *users.UpdateProfilePhotoResult {
	v := &users.ProfilePhoto{
		PhotoUUID: body.PhotoUUID,
	}
	res := &users.UpdateProfilePhotoResult{
		PhotoID: v,
	}

	return res
}

// NewUpdateProfilePhotoUnauthorized builds a users service
// update_profile_photo endpoint unauthorized error.
func NewUpdateProfilePhotoUnauthorized(body *UpdateProfilePhotoUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetContactInfoResultOK builds a "users" service "get_contact_info"
// endpoint result from a HTTP "OK" response.
func NewGetContactInfoResultOK(body *GetContactInfoResponseBody) *users.GetContactInfoResult {
	v := &users.User{
		FirstName: *body.FirstName,
		LastName:  *body.LastName,
		Phone:     *body.Phone,
		Email:     *body.Email,
	}
	res := &users.GetContactInfoResult{
		ContactInfo: v,
	}

	return res
}

// NewGetContactInfoUnauthorized builds a users service get_contact_info
// endpoint unauthorized error.
func NewGetContactInfoUnauthorized(body *GetContactInfoUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateUpdateBioResponseBody runs the validations defined on
// update_bio_response_body
func ValidateUpdateBioResponseBody(body *UpdateBioResponseBody) (err error) {
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstName", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastName", "body"))
	}
	if body.Phone == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phone", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	return
}

// ValidateGetContactInfoResponseBody runs the validations defined on
// get_contact_info_response_body
func ValidateGetContactInfoResponseBody(body *GetContactInfoResponseBody) (err error) {
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstName", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastName", "body"))
	}
	if body.Phone == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phone", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	return
}

// ValidateUpdateBioUnauthorizedResponseBody runs the validations defined on
// update_bio_unauthorized_response_body
func ValidateUpdateBioUnauthorizedResponseBody(body *UpdateBioUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateProfilePhotoUnauthorizedResponseBody runs the validations
// defined on update_profile_photo_unauthorized_response_body
func ValidateUpdateProfilePhotoUnauthorizedResponseBody(body *UpdateProfilePhotoUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetContactInfoUnauthorizedResponseBody runs the validations defined
// on get_contact_info_unauthorized_response_body
func ValidateGetContactInfoUnauthorizedResponseBody(body *GetContactInfoUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUserResponseBody runs the validations defined on UserResponseBody
func ValidateUserResponseBody(body *UserResponseBody) (err error) {
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstName", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastName", "body"))
	}
	if body.Phone == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phone", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	return
}
