// Code generated by goa v3.10.2, DO NOT EDIT.
//
// users HTTP client CLI support package
//
// Command:
// $ goa gen backend/design

package client

import (
	users "backend/gen/users"
	"encoding/json"
	"fmt"
	"strconv"
)

// BuildUpdateBioPayload builds the payload for the users update_bio endpoint
// from CLI flags.
func BuildUpdateBioPayload(usersUpdateBioBody string, usersUpdateBioToken string) (*users.UpdateBioPayload, error) {
	var err error
	var body UpdateBioRequestBody
	{
		err = json.Unmarshal([]byte(usersUpdateBioBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"bio\": \"Est iusto eos sunt quis deleniti.\"\n   }'")
		}
	}
	var token string
	{
		token = usersUpdateBioToken
	}
	v := &users.UpdateBioPayload{
		Bio: body.Bio,
	}
	v.Token = token

	return v, nil
}

// BuildGetContactInfoPayload builds the payload for the users get_contact_info
// endpoint from CLI flags.
func BuildGetContactInfoPayload(usersGetContactInfoUserid string) (*users.GetContactInfoPayload, error) {
	var err error
	var userid int
	{
		var v int64
		v, err = strconv.ParseInt(usersGetContactInfoUserid, 10, strconv.IntSize)
		userid = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for userid, must be INT")
		}
	}
	v := &users.GetContactInfoPayload{}
	v.Userid = userid

	return v, nil
}
