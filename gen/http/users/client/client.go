// Code generated by goa v3.10.2, DO NOT EDIT.
//
// users client HTTP transport
//
// Command:
// $ goa gen backend/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the users service endpoint HTTP clients.
type Client struct {
	// UpdateBio Doer is the HTTP client used to make requests to the update_bio
	// endpoint.
	UpdateBioDoer goahttp.Doer

	// UpdateProfilePicture Doer is the HTTP client used to make requests to the
	// update_profile_picture endpoint.
	UpdateProfilePictureDoer goahttp.Doer

	// GetUserInfo Doer is the HTTP client used to make requests to the
	// get_user_info endpoint.
	GetUserInfoDoer goahttp.Doer

	// CORS Doer is the HTTP client used to make requests to the  endpoint.
	CORSDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the users service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		UpdateBioDoer:            doer,
		UpdateProfilePictureDoer: doer,
		GetUserInfoDoer:          doer,
		CORSDoer:                 doer,
		RestoreResponseBody:      restoreBody,
		scheme:                   scheme,
		host:                     host,
		decoder:                  dec,
		encoder:                  enc,
	}
}

// UpdateBio returns an endpoint that makes HTTP requests to the users service
// update_bio server.
func (c *Client) UpdateBio() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateBioRequest(c.encoder)
		decodeResponse = DecodeUpdateBioResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateBioRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateBioDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("users", "update_bio", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateProfilePicture returns an endpoint that makes HTTP requests to the
// users service update_profile_picture server.
func (c *Client) UpdateProfilePicture() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateProfilePictureRequest(c.encoder)
		decodeResponse = DecodeUpdateProfilePictureResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUpdateProfilePictureRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateProfilePictureDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("users", "update_profile_picture", err)
		}
		return decodeResponse(resp)
	}
}

// GetUserInfo returns an endpoint that makes HTTP requests to the users
// service get_user_info server.
func (c *Client) GetUserInfo() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetUserInfoRequest(c.encoder)
		decodeResponse = DecodeGetUserInfoResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetUserInfoRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetUserInfoDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("users", "get_user_info", err)
		}
		return decodeResponse(resp)
	}
}
