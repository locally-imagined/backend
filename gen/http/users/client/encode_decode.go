// Code generated by goa v3.10.2, DO NOT EDIT.
//
// users HTTP client encoders and decoders
//
// Command:
// $ goa gen backend/design

package client

import (
	users "backend/gen/users"
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"

	goahttp "goa.design/goa/v3/http"
)

// BuildUpdateBioRequest instantiates a HTTP request object with method and
// path set to call the "users" service "update_bio" endpoint
func (c *Client) BuildUpdateBioRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateBioUsersPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "update_bio", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateBioRequest returns an encoder for requests sent to the users
// update_bio server.
func EncodeUpdateBioRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*users.UpdateBioPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "update_bio", "*users.UpdateBioPayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdateBioRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("users", "update_bio", err)
		}
		return nil
	}
}

// DecodeUpdateBioResponse returns a decoder for responses returned by the
// users update_bio endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUpdateBioResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - error: internal error
func DecodeUpdateBioResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateBioResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "update_bio", err)
			}
			err = ValidateUpdateBioResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "update_bio", err)
			}
			res := NewUpdateBioResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body UpdateBioUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "update_bio", err)
			}
			err = ValidateUpdateBioUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "update_bio", err)
			}
			return nil, NewUpdateBioUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "update_bio", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateProfilePictureRequest instantiates a HTTP request object with
// method and path set to call the "users" service "update_profile_picture"
// endpoint
func (c *Client) BuildUpdateProfilePictureRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateProfilePictureUsersPath()}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "update_profile_picture", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateProfilePictureRequest returns an encoder for requests sent to
// the users update_profile_picture server.
func EncodeUpdateProfilePictureRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*users.UpdateProfilePicturePayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "update_profile_picture", "*users.UpdateProfilePicturePayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdateProfilePictureRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("users", "update_profile_picture", err)
		}
		return nil
	}
}

// DecodeUpdateProfilePictureResponse returns a decoder for responses returned
// by the users update_profile_picture endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeUpdateProfilePictureResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - error: internal error
func DecodeUpdateProfilePictureResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateProfilePictureResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "update_profile_picture", err)
			}
			res := NewUpdateProfilePictureResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body UpdateProfilePictureUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "update_profile_picture", err)
			}
			err = ValidateUpdateProfilePictureUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "update_profile_picture", err)
			}
			return nil, NewUpdateProfilePictureUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "update_profile_picture", resp.StatusCode, string(body))
		}
	}
}

// BuildGetContactInfoRequest instantiates a HTTP request object with method
// and path set to call the "users" service "get_contact_info" endpoint
func (c *Client) BuildGetContactInfoRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetContactInfoUsersPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("users", "get_contact_info", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetContactInfoRequest returns an encoder for requests sent to the
// users get_contact_info server.
func EncodeGetContactInfoRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*users.GetContactInfoPayload)
		if !ok {
			return goahttp.ErrInvalidType("users", "get_contact_info", "*users.GetContactInfoPayload", v)
		}
		values := req.URL.Query()
		values.Add("userID", p.UserID)
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetContactInfoResponse returns a decoder for responses returned by the
// users get_contact_info endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeGetContactInfoResponse may return the following errors:
//   - "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//   - error: internal error
func DecodeGetContactInfoResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetContactInfoResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "get_contact_info", err)
			}
			err = ValidateGetContactInfoResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "get_contact_info", err)
			}
			res := NewGetContactInfoResultOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GetContactInfoUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("users", "get_contact_info", err)
			}
			err = ValidateGetContactInfoUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("users", "get_contact_info", err)
			}
			return nil, NewGetContactInfoUnauthorized(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("users", "get_contact_info", resp.StatusCode, string(body))
		}
	}
}
