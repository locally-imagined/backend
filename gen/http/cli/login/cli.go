// Code generated by goa v3.10.2, DO NOT EDIT.
//
// login HTTP client CLI support package
//
// Command:
// $ goa gen backend/design

package cli

import (
	loginc "backend/gen/http/login/client"
	postingsc "backend/gen/http/postings/client"
	signupc "backend/gen/http/signup/client"
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `login login
signup signup
postings (create-post|get-post-page|get-images-for-post)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` login login --username "Aut aut impedit." --password "Odio tempora commodi officiis numquam molestiae."` + "\n" +
		os.Args[0] + ` signup signup --body '{
      "email": "Magnam non voluptas aut vero pariatur.",
      "firstName": "Earum quia aut.",
      "lastName": "Aut id placeat voluptate expedita sunt culpa.",
      "phone": "Voluptatibus cupiditate ea cum ut beatae."
   }' --username "Ut in sapiente illo explicabo aut." --password "Autem quia veritatis dolorem."` + "\n" +
		os.Args[0] + ` postings create-post --body '{
      "content": "QXV0IGV0IGF0cXVlLg==",
      "description": "Quae autem quia nemo iste similique veritatis.",
      "price": "At ad.",
      "title": "Ut molestiae nihil ipsam voluptatem explicabo qui."
   }' --token "Aut animi et deserunt est."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		loginFlags = flag.NewFlagSet("login", flag.ContinueOnError)

		loginLoginFlags        = flag.NewFlagSet("login", flag.ExitOnError)
		loginLoginUsernameFlag = loginLoginFlags.String("username", "REQUIRED", "Raw username")
		loginLoginPasswordFlag = loginLoginFlags.String("password", "REQUIRED", "User password")

		signupFlags = flag.NewFlagSet("signup", flag.ContinueOnError)

		signupSignupFlags        = flag.NewFlagSet("signup", flag.ExitOnError)
		signupSignupBodyFlag     = signupSignupFlags.String("body", "REQUIRED", "")
		signupSignupUsernameFlag = signupSignupFlags.String("username", "REQUIRED", "Raw username")
		signupSignupPasswordFlag = signupSignupFlags.String("password", "REQUIRED", "User password")

		postingsFlags = flag.NewFlagSet("postings", flag.ContinueOnError)

		postingsCreatePostFlags     = flag.NewFlagSet("create-post", flag.ExitOnError)
		postingsCreatePostBodyFlag  = postingsCreatePostFlags.String("body", "REQUIRED", "")
		postingsCreatePostTokenFlag = postingsCreatePostFlags.String("token", "REQUIRED", "")

		postingsGetPostPageFlags    = flag.NewFlagSet("get-post-page", flag.ExitOnError)
		postingsGetPostPagePageFlag = postingsGetPostPageFlags.String("page", "REQUIRED", "Page to get posts for")

		postingsGetImagesForPostFlags    = flag.NewFlagSet("get-images-for-post", flag.ExitOnError)
		postingsGetImagesForPostPostFlag = postingsGetImagesForPostFlags.String("post", "REQUIRED", "Post to get images for")
	)
	loginFlags.Usage = loginUsage
	loginLoginFlags.Usage = loginLoginUsage

	signupFlags.Usage = signupUsage
	signupSignupFlags.Usage = signupSignupUsage

	postingsFlags.Usage = postingsUsage
	postingsCreatePostFlags.Usage = postingsCreatePostUsage
	postingsGetPostPageFlags.Usage = postingsGetPostPageUsage
	postingsGetImagesForPostFlags.Usage = postingsGetImagesForPostUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "login":
			svcf = loginFlags
		case "signup":
			svcf = signupFlags
		case "postings":
			svcf = postingsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "login":
			switch epn {
			case "login":
				epf = loginLoginFlags

			}

		case "signup":
			switch epn {
			case "signup":
				epf = signupSignupFlags

			}

		case "postings":
			switch epn {
			case "create-post":
				epf = postingsCreatePostFlags

			case "get-post-page":
				epf = postingsGetPostPageFlags

			case "get-images-for-post":
				epf = postingsGetImagesForPostFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "login":
			c := loginc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "login":
				endpoint = c.Login()
				data, err = loginc.BuildLoginPayload(*loginLoginUsernameFlag, *loginLoginPasswordFlag)
			}
		case "signup":
			c := signupc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "signup":
				endpoint = c.Signup()
				data, err = signupc.BuildSignupPayload(*signupSignupBodyFlag, *signupSignupUsernameFlag, *signupSignupPasswordFlag)
			}
		case "postings":
			c := postingsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-post":
				endpoint = c.CreatePost()
				data, err = postingsc.BuildCreatePostPayload(*postingsCreatePostBodyFlag, *postingsCreatePostTokenFlag)
			case "get-post-page":
				endpoint = c.GetPostPage()
				data, err = postingsc.BuildGetPostPagePayload(*postingsGetPostPagePageFlag)
			case "get-images-for-post":
				endpoint = c.GetImagesForPost()
				data, err = postingsc.BuildGetImagesForPostPayload(*postingsGetImagesForPostPostFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// loginUsage displays the usage of the login command and its subcommands.
func loginUsage() {
	fmt.Fprintf(os.Stderr, `Service is the login service interface.
Usage:
    %[1]s [globalflags] login COMMAND [flags]

COMMAND:
    login: Login implements Login.

Additional help:
    %[1]s login COMMAND --help
`, os.Args[0])
}
func loginLoginUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] login login -username STRING -password STRING

Login implements Login.
    -username STRING: Raw username
    -password STRING: User password

Example:
    %[1]s login login --username "Aut aut impedit." --password "Odio tempora commodi officiis numquam molestiae."
`, os.Args[0])
}

// signupUsage displays the usage of the signup command and its subcommands.
func signupUsage() {
	fmt.Fprintf(os.Stderr, `Service is the signup service interface.
Usage:
    %[1]s [globalflags] signup COMMAND [flags]

COMMAND:
    signup: Signup implements Signup.

Additional help:
    %[1]s signup COMMAND --help
`, os.Args[0])
}
func signupSignupUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] signup signup -body JSON -username STRING -password STRING

Signup implements Signup.
    -body JSON: 
    -username STRING: Raw username
    -password STRING: User password

Example:
    %[1]s signup signup --body '{
      "email": "Magnam non voluptas aut vero pariatur.",
      "firstName": "Earum quia aut.",
      "lastName": "Aut id placeat voluptate expedita sunt culpa.",
      "phone": "Voluptatibus cupiditate ea cum ut beatae."
   }' --username "Ut in sapiente illo explicabo aut." --password "Autem quia veritatis dolorem."
`, os.Args[0])
}

// postingsUsage displays the usage of the postings command and its subcommands.
func postingsUsage() {
	fmt.Fprintf(os.Stderr, `Service is the postings service interface.
Usage:
    %[1]s [globalflags] postings COMMAND [flags]

COMMAND:
    create-post: CreatePost implements create_post.
    get-post-page: GetPostPage implements get_post_page.
    get-images-for-post: GetImagesForPost implements get_images_for_post.

Additional help:
    %[1]s postings COMMAND --help
`, os.Args[0])
}
func postingsCreatePostUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] postings create-post -body JSON -token STRING

CreatePost implements create_post.
    -body JSON: 
    -token STRING: 

Example:
    %[1]s postings create-post --body '{
      "content": "QXV0IGV0IGF0cXVlLg==",
      "description": "Quae autem quia nemo iste similique veritatis.",
      "price": "At ad.",
      "title": "Ut molestiae nihil ipsam voluptatem explicabo qui."
   }' --token "Aut animi et deserunt est."
`, os.Args[0])
}

func postingsGetPostPageUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] postings get-post-page -page INT

GetPostPage implements get_post_page.
    -page INT: Page to get posts for

Example:
    %[1]s postings get-post-page --page 1713403309615228382
`, os.Args[0])
}

func postingsGetImagesForPostUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] postings get-images-for-post -post STRING

GetImagesForPost implements get_images_for_post.
    -post STRING: Post to get images for

Example:
    %[1]s postings get-images-for-post --post "Qui autem eveniet."
`, os.Args[0])
}
