// Code generated by goa v3.10.1, DO NOT EDIT.
//
// login HTTP client CLI support package
//
// Command:
// $ goa gen backend/design

package cli

import (
	loginc "backend/gen/http/login/client"
	signupc "backend/gen/http/signup/client"
	uploadc "backend/gen/http/upload/client"
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `login login
signup signup
upload upload-photo
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` login login --username "Accusantium ipsam nisi pariatur magnam." --password "Et incidunt assumenda sequi."` + "\n" +
		os.Args[0] + ` signup signup --username "Autem neque numquam." --password "Nisi tempora delectus architecto."` + "\n" +
		os.Args[0] + ` upload upload-photo --content "TmFtIGRvbG9yaWJ1cyBkb2xvciBjb21tb2RpIGNvbnNlcXV1bnR1ciBwZXJmZXJlbmRpcyBlYS4=" --token "Qui unde et mollitia modi."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		loginFlags = flag.NewFlagSet("login", flag.ContinueOnError)

		loginLoginFlags        = flag.NewFlagSet("login", flag.ExitOnError)
		loginLoginUsernameFlag = loginLoginFlags.String("username", "REQUIRED", "Raw username")
		loginLoginPasswordFlag = loginLoginFlags.String("password", "REQUIRED", "User password")

		signupFlags = flag.NewFlagSet("signup", flag.ContinueOnError)

		signupSignupFlags        = flag.NewFlagSet("signup", flag.ExitOnError)
		signupSignupUsernameFlag = signupSignupFlags.String("username", "REQUIRED", "Raw username")
		signupSignupPasswordFlag = signupSignupFlags.String("password", "REQUIRED", "User password")

		uploadFlags = flag.NewFlagSet("upload", flag.ContinueOnError)

		uploadUploadPhotoFlags       = flag.NewFlagSet("upload-photo", flag.ExitOnError)
		uploadUploadPhotoContentFlag = uploadUploadPhotoFlags.String("content", "REQUIRED", "photo content")
		uploadUploadPhotoTokenFlag   = uploadUploadPhotoFlags.String("token", "REQUIRED", "")
	)
	loginFlags.Usage = loginUsage
	loginLoginFlags.Usage = loginLoginUsage

	signupFlags.Usage = signupUsage
	signupSignupFlags.Usage = signupSignupUsage

	uploadFlags.Usage = uploadUsage
	uploadUploadPhotoFlags.Usage = uploadUploadPhotoUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "login":
			svcf = loginFlags
		case "signup":
			svcf = signupFlags
		case "upload":
			svcf = uploadFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "login":
			switch epn {
			case "login":
				epf = loginLoginFlags

			}

		case "signup":
			switch epn {
			case "signup":
				epf = signupSignupFlags

			}

		case "upload":
			switch epn {
			case "upload-photo":
				epf = uploadUploadPhotoFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "login":
			c := loginc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "login":
				endpoint = c.Login()
				data, err = loginc.BuildLoginPayload(*loginLoginUsernameFlag, *loginLoginPasswordFlag)
			}
		case "signup":
			c := signupc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "signup":
				endpoint = c.Signup()
				data, err = signupc.BuildSignupPayload(*signupSignupUsernameFlag, *signupSignupPasswordFlag)
			}
		case "upload":
			c := uploadc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "upload-photo":
				endpoint = c.UploadPhoto()
				data, err = uploadc.BuildUploadPhotoPayload(*uploadUploadPhotoContentFlag, *uploadUploadPhotoTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// loginUsage displays the usage of the login command and its subcommands.
func loginUsage() {
	fmt.Fprintf(os.Stderr, `Service is the login service interface.
Usage:
    %[1]s [globalflags] login COMMAND [flags]

COMMAND:
    login: Login implements Login.

Additional help:
    %[1]s login COMMAND --help
`, os.Args[0])
}
func loginLoginUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] login login -username STRING -password STRING

Login implements Login.
    -username STRING: Raw username
    -password STRING: User password

Example:
    %[1]s login login --username "Accusantium ipsam nisi pariatur magnam." --password "Et incidunt assumenda sequi."
`, os.Args[0])
}

// signupUsage displays the usage of the signup command and its subcommands.
func signupUsage() {
	fmt.Fprintf(os.Stderr, `Service is the signup service interface.
Usage:
    %[1]s [globalflags] signup COMMAND [flags]

COMMAND:
    signup: Signup implements Signup.

Additional help:
    %[1]s signup COMMAND --help
`, os.Args[0])
}
func signupSignupUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] signup signup -username STRING -password STRING

Signup implements Signup.
    -username STRING: Raw username
    -password STRING: User password

Example:
    %[1]s signup signup --username "Autem neque numquam." --password "Nisi tempora delectus architecto."
`, os.Args[0])
}

// uploadUsage displays the usage of the upload command and its subcommands.
func uploadUsage() {
	fmt.Fprintf(os.Stderr, `Service is the upload service interface.
Usage:
    %[1]s [globalflags] upload COMMAND [flags]

COMMAND:
    upload-photo: UploadPhoto implements upload_photo.

Additional help:
    %[1]s upload COMMAND --help
`, os.Args[0])
}
func uploadUploadPhotoUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] upload upload-photo -content STRING -token STRING

UploadPhoto implements upload_photo.
    -content STRING: photo content
    -token STRING: 

Example:
    %[1]s upload upload-photo --content "TmFtIGRvbG9yaWJ1cyBkb2xvciBjb21tb2RpIGNvbnNlcXV1bnR1ciBwZXJmZXJlbmRpcyBlYS4=" --token "Qui unde et mollitia modi."
`, os.Args[0])
}
