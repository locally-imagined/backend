// Code generated by goa v3.10.2, DO NOT EDIT.
//
// locallyimagined HTTP client CLI support package
//
// Command:
// $ goa gen backend/design

package cli

import (
	loginc "backend/gen/http/login/client"
	postingsc "backend/gen/http/postings/client"
	signupc "backend/gen/http/signup/client"
	usersc "backend/gen/http/users/client"
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `login login
signup signup
users (update-bio|update-profile-picture|get-user-info)
postings (create-post|delete-post|edit-post|get-post-page|get-artist-post-page|get-post-page-filtered|get-images-for-post|get-artists)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` login login --username "Consequuntur et excepturi praesentium quae." --password "Assumenda voluptatem et commodi atque."` + "\n" +
		os.Args[0] + ` signup signup --body '{
      "email": "Voluptatem maiores est maiores.",
      "firstName": "Iure quam possimus quaerat maxime et.",
      "lastName": "Qui aut aut saepe eos nam placeat.",
      "phone": "Nesciunt excepturi quam eaque."
   }' --username "Dolor porro assumenda dolor ex." --password "Dicta rerum."` + "\n" +
		os.Args[0] + ` users update-bio --body '{
      "bio": "Quos exercitationem eaque dolores ea deleniti."
   }' --token "Doloribus expedita ut consequuntur et est."` + "\n" +
		os.Args[0] + ` postings create-post --body '{
      "content": [
         "Omnis dignissimos et maxime.",
         "Accusamus velit est soluta ratione.",
         "Vel porro ut maiores iste exercitationem."
      ],
      "deliverytype": "Minima fuga.",
      "description": "Laborum assumenda soluta eos inventore ut ipsam.",
      "medium": "Officiis tenetur est dolor.",
      "price": "Iusto et in eum reiciendis.",
      "title": "Cumque ipsam unde excepturi."
   }' --token "Quidem quia reiciendis."` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		loginFlags = flag.NewFlagSet("login", flag.ContinueOnError)

		loginLoginFlags        = flag.NewFlagSet("login", flag.ExitOnError)
		loginLoginUsernameFlag = loginLoginFlags.String("username", "REQUIRED", "Raw username")
		loginLoginPasswordFlag = loginLoginFlags.String("password", "REQUIRED", "User password")

		signupFlags = flag.NewFlagSet("signup", flag.ContinueOnError)

		signupSignupFlags        = flag.NewFlagSet("signup", flag.ExitOnError)
		signupSignupBodyFlag     = signupSignupFlags.String("body", "REQUIRED", "")
		signupSignupUsernameFlag = signupSignupFlags.String("username", "REQUIRED", "Raw username")
		signupSignupPasswordFlag = signupSignupFlags.String("password", "REQUIRED", "User password")

		usersFlags = flag.NewFlagSet("users", flag.ContinueOnError)

		usersUpdateBioFlags     = flag.NewFlagSet("update-bio", flag.ExitOnError)
		usersUpdateBioBodyFlag  = usersUpdateBioFlags.String("body", "REQUIRED", "")
		usersUpdateBioTokenFlag = usersUpdateBioFlags.String("token", "REQUIRED", "")

		usersUpdateProfilePictureFlags     = flag.NewFlagSet("update-profile-picture", flag.ExitOnError)
		usersUpdateProfilePictureBodyFlag  = usersUpdateProfilePictureFlags.String("body", "REQUIRED", "")
		usersUpdateProfilePictureTokenFlag = usersUpdateProfilePictureFlags.String("token", "REQUIRED", "")

		usersGetUserInfoFlags      = flag.NewFlagSet("get-user-info", flag.ExitOnError)
		usersGetUserInfoUserIDFlag = usersGetUserInfoFlags.String("user-id", "REQUIRED", "")

		postingsFlags = flag.NewFlagSet("postings", flag.ContinueOnError)

		postingsCreatePostFlags     = flag.NewFlagSet("create-post", flag.ExitOnError)
		postingsCreatePostBodyFlag  = postingsCreatePostFlags.String("body", "REQUIRED", "")
		postingsCreatePostTokenFlag = postingsCreatePostFlags.String("token", "REQUIRED", "")

		postingsDeletePostFlags      = flag.NewFlagSet("delete-post", flag.ExitOnError)
		postingsDeletePostPostIDFlag = postingsDeletePostFlags.String("post-id", "REQUIRED", "Post to delete")
		postingsDeletePostTokenFlag  = postingsDeletePostFlags.String("token", "REQUIRED", "")

		postingsEditPostFlags            = flag.NewFlagSet("edit-post", flag.ExitOnError)
		postingsEditPostBodyFlag         = postingsEditPostFlags.String("body", "REQUIRED", "")
		postingsEditPostPostIDFlag       = postingsEditPostFlags.String("post-id", "REQUIRED", "Post ID")
		postingsEditPostTitleFlag        = postingsEditPostFlags.String("title", "", "")
		postingsEditPostDescriptionFlag  = postingsEditPostFlags.String("description", "", "")
		postingsEditPostPriceFlag        = postingsEditPostFlags.String("price", "", "")
		postingsEditPostMediumFlag       = postingsEditPostFlags.String("medium", "", "")
		postingsEditPostSoldFlag         = postingsEditPostFlags.String("sold", "", "")
		postingsEditPostDeliverytypeFlag = postingsEditPostFlags.String("deliverytype", "", "")
		postingsEditPostImageIDFlag      = postingsEditPostFlags.String("image-id", "", "")
		postingsEditPostTokenFlag        = postingsEditPostFlags.String("token", "REQUIRED", "")

		postingsGetPostPageFlags    = flag.NewFlagSet("get-post-page", flag.ExitOnError)
		postingsGetPostPagePageFlag = postingsGetPostPageFlags.String("page", "REQUIRED", "Page to get posts for")

		postingsGetArtistPostPageFlags      = flag.NewFlagSet("get-artist-post-page", flag.ExitOnError)
		postingsGetArtistPostPagePageFlag   = postingsGetArtistPostPageFlags.String("page", "REQUIRED", "Page to get posts for")
		postingsGetArtistPostPageUserIDFlag = postingsGetArtistPostPageFlags.String("user-id", "REQUIRED", "")

		postingsGetPostPageFilteredFlags         = flag.NewFlagSet("get-post-page-filtered", flag.ExitOnError)
		postingsGetPostPageFilteredPageFlag      = postingsGetPostPageFilteredFlags.String("page", "REQUIRED", "Page to get posts for")
		postingsGetPostPageFilteredKeywordFlag   = postingsGetPostPageFilteredFlags.String("keyword", "", "")
		postingsGetPostPageFilteredStartDateFlag = postingsGetPostPageFilteredFlags.String("start-date", "", "")
		postingsGetPostPageFilteredEndDateFlag   = postingsGetPostPageFilteredFlags.String("end-date", "", "")
		postingsGetPostPageFilteredMediumFlag    = postingsGetPostPageFilteredFlags.String("medium", "", "")

		postingsGetImagesForPostFlags      = flag.NewFlagSet("get-images-for-post", flag.ExitOnError)
		postingsGetImagesForPostPostIDFlag = postingsGetImagesForPostFlags.String("post-id", "REQUIRED", "Post to get images for")

		postingsGetArtistsFlags    = flag.NewFlagSet("get-artists", flag.ExitOnError)
		postingsGetArtistsPageFlag = postingsGetArtistsFlags.String("page", "REQUIRED", "Page to get artists for")
	)
	loginFlags.Usage = loginUsage
	loginLoginFlags.Usage = loginLoginUsage

	signupFlags.Usage = signupUsage
	signupSignupFlags.Usage = signupSignupUsage

	usersFlags.Usage = usersUsage
	usersUpdateBioFlags.Usage = usersUpdateBioUsage
	usersUpdateProfilePictureFlags.Usage = usersUpdateProfilePictureUsage
	usersGetUserInfoFlags.Usage = usersGetUserInfoUsage

	postingsFlags.Usage = postingsUsage
	postingsCreatePostFlags.Usage = postingsCreatePostUsage
	postingsDeletePostFlags.Usage = postingsDeletePostUsage
	postingsEditPostFlags.Usage = postingsEditPostUsage
	postingsGetPostPageFlags.Usage = postingsGetPostPageUsage
	postingsGetArtistPostPageFlags.Usage = postingsGetArtistPostPageUsage
	postingsGetPostPageFilteredFlags.Usage = postingsGetPostPageFilteredUsage
	postingsGetImagesForPostFlags.Usage = postingsGetImagesForPostUsage
	postingsGetArtistsFlags.Usage = postingsGetArtistsUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "login":
			svcf = loginFlags
		case "signup":
			svcf = signupFlags
		case "users":
			svcf = usersFlags
		case "postings":
			svcf = postingsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "login":
			switch epn {
			case "login":
				epf = loginLoginFlags

			}

		case "signup":
			switch epn {
			case "signup":
				epf = signupSignupFlags

			}

		case "users":
			switch epn {
			case "update-bio":
				epf = usersUpdateBioFlags

			case "update-profile-picture":
				epf = usersUpdateProfilePictureFlags

			case "get-user-info":
				epf = usersGetUserInfoFlags

			}

		case "postings":
			switch epn {
			case "create-post":
				epf = postingsCreatePostFlags

			case "delete-post":
				epf = postingsDeletePostFlags

			case "edit-post":
				epf = postingsEditPostFlags

			case "get-post-page":
				epf = postingsGetPostPageFlags

			case "get-artist-post-page":
				epf = postingsGetArtistPostPageFlags

			case "get-post-page-filtered":
				epf = postingsGetPostPageFilteredFlags

			case "get-images-for-post":
				epf = postingsGetImagesForPostFlags

			case "get-artists":
				epf = postingsGetArtistsFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "login":
			c := loginc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "login":
				endpoint = c.Login()
				data, err = loginc.BuildLoginPayload(*loginLoginUsernameFlag, *loginLoginPasswordFlag)
			}
		case "signup":
			c := signupc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "signup":
				endpoint = c.Signup()
				data, err = signupc.BuildSignupPayload(*signupSignupBodyFlag, *signupSignupUsernameFlag, *signupSignupPasswordFlag)
			}
		case "users":
			c := usersc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "update-bio":
				endpoint = c.UpdateBio()
				data, err = usersc.BuildUpdateBioPayload(*usersUpdateBioBodyFlag, *usersUpdateBioTokenFlag)
			case "update-profile-picture":
				endpoint = c.UpdateProfilePicture()
				data, err = usersc.BuildUpdateProfilePicturePayload(*usersUpdateProfilePictureBodyFlag, *usersUpdateProfilePictureTokenFlag)
			case "get-user-info":
				endpoint = c.GetUserInfo()
				data, err = usersc.BuildGetUserInfoPayload(*usersGetUserInfoUserIDFlag)
			}
		case "postings":
			c := postingsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-post":
				endpoint = c.CreatePost()
				data, err = postingsc.BuildCreatePostPayload(*postingsCreatePostBodyFlag, *postingsCreatePostTokenFlag)
			case "delete-post":
				endpoint = c.DeletePost()
				data, err = postingsc.BuildDeletePostPayload(*postingsDeletePostPostIDFlag, *postingsDeletePostTokenFlag)
			case "edit-post":
				endpoint = c.EditPost()
				data, err = postingsc.BuildEditPostPayload(*postingsEditPostBodyFlag, *postingsEditPostPostIDFlag, *postingsEditPostTitleFlag, *postingsEditPostDescriptionFlag, *postingsEditPostPriceFlag, *postingsEditPostMediumFlag, *postingsEditPostSoldFlag, *postingsEditPostDeliverytypeFlag, *postingsEditPostImageIDFlag, *postingsEditPostTokenFlag)
			case "get-post-page":
				endpoint = c.GetPostPage()
				data, err = postingsc.BuildGetPostPagePayload(*postingsGetPostPagePageFlag)
			case "get-artist-post-page":
				endpoint = c.GetArtistPostPage()
				data, err = postingsc.BuildGetArtistPostPagePayload(*postingsGetArtistPostPagePageFlag, *postingsGetArtistPostPageUserIDFlag)
			case "get-post-page-filtered":
				endpoint = c.GetPostPageFiltered()
				data, err = postingsc.BuildGetPostPageFilteredPayload(*postingsGetPostPageFilteredPageFlag, *postingsGetPostPageFilteredKeywordFlag, *postingsGetPostPageFilteredStartDateFlag, *postingsGetPostPageFilteredEndDateFlag, *postingsGetPostPageFilteredMediumFlag)
			case "get-images-for-post":
				endpoint = c.GetImagesForPost()
				data, err = postingsc.BuildGetImagesForPostPayload(*postingsGetImagesForPostPostIDFlag)
			case "get-artists":
				endpoint = c.GetArtists()
				data, err = postingsc.BuildGetArtistsPayload(*postingsGetArtistsPageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// loginUsage displays the usage of the login command and its subcommands.
func loginUsage() {
	fmt.Fprintf(os.Stderr, `Service is the login service interface.
Usage:
    %[1]s [globalflags] login COMMAND [flags]

COMMAND:
    login: Login implements Login.

Additional help:
    %[1]s login COMMAND --help
`, os.Args[0])
}
func loginLoginUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] login login -username STRING -password STRING

Login implements Login.
    -username STRING: Raw username
    -password STRING: User password

Example:
    %[1]s login login --username "Consequuntur et excepturi praesentium quae." --password "Assumenda voluptatem et commodi atque."
`, os.Args[0])
}

// signupUsage displays the usage of the signup command and its subcommands.
func signupUsage() {
	fmt.Fprintf(os.Stderr, `Service is the signup service interface.
Usage:
    %[1]s [globalflags] signup COMMAND [flags]

COMMAND:
    signup: Signup implements Signup.

Additional help:
    %[1]s signup COMMAND --help
`, os.Args[0])
}
func signupSignupUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] signup signup -body JSON -username STRING -password STRING

Signup implements Signup.
    -body JSON: 
    -username STRING: Raw username
    -password STRING: User password

Example:
    %[1]s signup signup --body '{
      "email": "Voluptatem maiores est maiores.",
      "firstName": "Iure quam possimus quaerat maxime et.",
      "lastName": "Qui aut aut saepe eos nam placeat.",
      "phone": "Nesciunt excepturi quam eaque."
   }' --username "Dolor porro assumenda dolor ex." --password "Dicta rerum."
`, os.Args[0])
}

// usersUsage displays the usage of the users command and its subcommands.
func usersUsage() {
	fmt.Fprintf(os.Stderr, `Service is the users service interface.
Usage:
    %[1]s [globalflags] users COMMAND [flags]

COMMAND:
    update-bio: UpdateBio implements update_bio.
    update-profile-picture: UpdateProfilePicture implements update_profile_picture.
    get-user-info: GetUserInfo implements get_user_info.

Additional help:
    %[1]s users COMMAND --help
`, os.Args[0])
}
func usersUpdateBioUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] users update-bio -body JSON -token STRING

UpdateBio implements update_bio.
    -body JSON: 
    -token STRING: 

Example:
    %[1]s users update-bio --body '{
      "bio": "Quos exercitationem eaque dolores ea deleniti."
   }' --token "Doloribus expedita ut consequuntur et est."
`, os.Args[0])
}

func usersUpdateProfilePictureUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] users update-profile-picture -body JSON -token STRING

UpdateProfilePicture implements update_profile_picture.
    -body JSON: 
    -token STRING: 

Example:
    %[1]s users update-profile-picture --body '{
      "content": "Est adipisci quia consectetur veritatis quod."
   }' --token "Officiis quidem iure et."
`, os.Args[0])
}

func usersGetUserInfoUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] users get-user-info -user-id STRING

GetUserInfo implements get_user_info.
    -user-id STRING: 

Example:
    %[1]s users get-user-info --user-id "Excepturi molestiae."
`, os.Args[0])
}

// postingsUsage displays the usage of the postings command and its subcommands.
func postingsUsage() {
	fmt.Fprintf(os.Stderr, `Service is the postings service interface.
Usage:
    %[1]s [globalflags] postings COMMAND [flags]

COMMAND:
    create-post: CreatePost implements create_post.
    delete-post: DeletePost implements delete_post.
    edit-post: EditPost implements edit_post.
    get-post-page: GetPostPage implements get_post_page.
    get-artist-post-page: GetArtistPostPage implements get_artist_post_page.
    get-post-page-filtered: GetPostPageFiltered implements get_post_page_filtered.
    get-images-for-post: GetImagesForPost implements get_images_for_post.
    get-artists: GetArtists implements get_artists.

Additional help:
    %[1]s postings COMMAND --help
`, os.Args[0])
}
func postingsCreatePostUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] postings create-post -body JSON -token STRING

CreatePost implements create_post.
    -body JSON: 
    -token STRING: 

Example:
    %[1]s postings create-post --body '{
      "content": [
         "Omnis dignissimos et maxime.",
         "Accusamus velit est soluta ratione.",
         "Vel porro ut maiores iste exercitationem."
      ],
      "deliverytype": "Minima fuga.",
      "description": "Laborum assumenda soluta eos inventore ut ipsam.",
      "medium": "Officiis tenetur est dolor.",
      "price": "Iusto et in eum reiciendis.",
      "title": "Cumque ipsam unde excepturi."
   }' --token "Quidem quia reiciendis."
`, os.Args[0])
}

func postingsDeletePostUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] postings delete-post -post-id STRING -token STRING

DeletePost implements delete_post.
    -post-id STRING: Post to delete
    -token STRING: 

Example:
    %[1]s postings delete-post --post-id "Ex in placeat enim nobis." --token "Nihil ut omnis eum."
`, os.Args[0])
}

func postingsEditPostUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] postings edit-post -body JSON -post-id STRING -title STRING -description STRING -price STRING -medium STRING -sold BOOL -deliverytype STRING -image-id STRING -token STRING

EditPost implements edit_post.
    -body JSON: 
    -post-id STRING: Post ID
    -title STRING: 
    -description STRING: 
    -price STRING: 
    -medium STRING: 
    -sold BOOL: 
    -deliverytype STRING: 
    -image-id STRING: 
    -token STRING: 

Example:
    %[1]s postings edit-post --body '{
      "content": "Vitae voluptatibus laboriosam vero."
   }' --post-id "Officia rerum deserunt facilis deleniti." --title "Alias omnis." --description "Molestiae sequi quia et natus architecto." --price "Quo aperiam vero nesciunt unde." --medium "Aut ipsam vitae magnam." --sold false --deliverytype "Alias soluta et nobis eos consequatur." --image-id "Sed culpa labore vel optio velit sed." --token "Velit quod aspernatur at ipsum molestias."
`, os.Args[0])
}

func postingsGetPostPageUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] postings get-post-page -page INT

GetPostPage implements get_post_page.
    -page INT: Page to get posts for

Example:
    %[1]s postings get-post-page --page 746433167552046631
`, os.Args[0])
}

func postingsGetArtistPostPageUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] postings get-artist-post-page -page INT -user-id STRING

GetArtistPostPage implements get_artist_post_page.
    -page INT: Page to get posts for
    -user-id STRING: 

Example:
    %[1]s postings get-artist-post-page --page 7095536306217917279 --user-id "Qui sequi adipisci animi ea voluptas."
`, os.Args[0])
}

func postingsGetPostPageFilteredUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] postings get-post-page-filtered -page INT -keyword STRING -start-date STRING -end-date STRING -medium STRING

GetPostPageFiltered implements get_post_page_filtered.
    -page INT: Page to get posts for
    -keyword STRING: 
    -start-date STRING: 
    -end-date STRING: 
    -medium STRING: 

Example:
    %[1]s postings get-post-page-filtered --page 6757351896834112646 --keyword "Et qui sunt." --start-date "Cupiditate sint ratione culpa est." --end-date "Molestiae molestiae est quis impedit dolores impedit." --medium "Aut consequatur aut et laudantium eius."
`, os.Args[0])
}

func postingsGetImagesForPostUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] postings get-images-for-post -post-id STRING

GetImagesForPost implements get_images_for_post.
    -post-id STRING: Post to get images for

Example:
    %[1]s postings get-images-for-post --post-id "Nulla aliquam voluptatem consectetur voluptatem."
`, os.Args[0])
}

func postingsGetArtistsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] postings get-artists -page INT

GetArtists implements get_artists.
    -page INT: Page to get artists for

Example:
    %[1]s postings get-artists --page 4028276158006184248
`, os.Args[0])
}
