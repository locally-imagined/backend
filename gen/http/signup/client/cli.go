// Code generated by goa v3.10.2, DO NOT EDIT.
//
// signup HTTP client CLI support package
//
// Command:
// $ goa gen backend/design

package client

import (
	signup "backend/gen/signup"
	"encoding/json"
	"fmt"
)

// BuildSignupPayload builds the payload for the signup Signup endpoint from
// CLI flags.
func BuildSignupPayload(signupSignupBody string, signupSignupUsername string, signupSignupPassword string) (*signup.SignupPayload, error) {
	var err error
	var body SignupRequestBody
	{
		err = json.Unmarshal([]byte(signupSignupBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"bio\": \"Beatae ipsum consequuntur et excepturi praesentium.\",\n      \"email\": \"Est velit consectetur et voluptatem magni sunt.\",\n      \"firstName\": \"Nihil repellendus et ratione.\",\n      \"lastName\": \"Error assumenda adipisci.\",\n      \"phone\": \"Et commodi.\",\n      \"profpicID\": \"Eaque assumenda voluptatem et commodi atque earum.\"\n   }'")
		}
	}
	var username string
	{
		username = signupSignupUsername
	}
	var password string
	{
		password = signupSignupPassword
	}
	v := &signup.User{
		FirstName: body.FirstName,
		LastName:  body.LastName,
		Phone:     body.Phone,
		Email:     body.Email,
		Bio:       body.Bio,
		ProfpicID: body.ProfpicID,
	}
	res := &signup.SignupPayload{
		User: v,
	}
	res.Username = username
	res.Password = password

	return res, nil
}
