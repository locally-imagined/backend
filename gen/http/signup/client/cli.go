// Code generated by goa v3.10.2, DO NOT EDIT.
//
// signup HTTP client CLI support package
//
// Command:
// $ goa gen backend/design

package client

import (
	signup "backend/gen/signup"
	"encoding/json"
	"fmt"

	goa "goa.design/goa/v3/pkg"
)

// BuildSignupPayload builds the payload for the signup Signup endpoint from
// CLI flags.
func BuildSignupPayload(signupSignupBody string, signupSignupUsername string, signupSignupPassword string) (*signup.SignupPayload, error) {
	var err error
	var body SignupRequestBody
	{
		err = json.Unmarshal([]byte(signupSignupBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"TmlzaSB0ZW1wb3JhIGRlbGVjdHVzIGFyY2hpdGVjdG8u\",\n      \"firstName\": \"Laborum ut iste et harum.\",\n      \"lastName\": \"Unde quod.\",\n      \"phone\": \"Autem neque numquam.\"\n   }'")
		}
		if body.Email == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var username string
	{
		username = signupSignupUsername
	}
	var password string
	{
		password = signupSignupPassword
	}
	v := &signup.User{
		FirstName: body.FirstName,
		LastName:  body.LastName,
		Phone:     body.Phone,
		Email:     body.Email,
	}
	res := &signup.SignupPayload{
		User: v,
	}
	res.Username = username
	res.Password = password

	return res, nil
}
