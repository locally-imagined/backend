// Code generated by goa v3.10.2, DO NOT EDIT.
//
// signup HTTP client types
//
// Command:
// $ goa gen backend/design

package client

import (
	signup "backend/gen/signup"

	goa "goa.design/goa/v3/pkg"
)

// SignupRequestBody is the type of the "signup" service "Signup" endpoint HTTP
// request body.
type SignupRequestBody struct {
	// First name
	FirstName string `form:"firstName" json:"firstName" xml:"firstName"`
	// Last name
	LastName string `form:"lastName" json:"lastName" xml:"lastName"`
	// Phone number
	Phone string `form:"phone" json:"phone" xml:"phone"`
	// Email
	Email string `form:"email" json:"email" xml:"email"`
	// Bio
	Bio string `form:"bio" json:"bio" xml:"bio"`
	// Prof Pic UUID
	ProfpicID string `form:"profpicID" json:"profpicID" xml:"profpicID"`
}

// SignupUnauthorizedResponseBody is the type of the "signup" service "Signup"
// endpoint HTTP response body for the "unauthorized" error.
type SignupUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewSignupRequestBody builds the HTTP request body from the payload of the
// "Signup" endpoint of the "signup" service.
func NewSignupRequestBody(p *signup.SignupPayload) *SignupRequestBody {
	body := &SignupRequestBody{
		FirstName: p.User.FirstName,
		LastName:  p.User.LastName,
		Phone:     p.User.Phone,
		Email:     p.User.Email,
		Bio:       p.User.Bio,
		ProfpicID: p.User.ProfpicID,
	}
	return body
}

// NewSignupResultOK builds a "signup" service "Signup" endpoint result from a
// HTTP "OK" response.
func NewSignupResultOK(body string) *signup.SignupResult {
	v := body
	res := &signup.SignupResult{
		JWT: &v,
	}

	return res
}

// NewSignupUnauthorized builds a signup service Signup endpoint unauthorized
// error.
func NewSignupUnauthorized(body *SignupUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateSignupUnauthorizedResponseBody runs the validations defined on
// Signup_unauthorized_Response_Body
func ValidateSignupUnauthorizedResponseBody(body *SignupUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
