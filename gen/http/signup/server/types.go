// Code generated by goa v3.10.2, DO NOT EDIT.
//
// signup HTTP server types
//
// Command:
// $ goa gen backend/design

package server

import (
	signup "backend/gen/signup"

	goa "goa.design/goa/v3/pkg"
)

// SignupRequestBody is the type of the "signup" service "Signup" endpoint HTTP
// request body.
type SignupRequestBody struct {
	// First name
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty" xml:"firstName,omitempty"`
	// Last name
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty" xml:"lastName,omitempty"`
	// Phone number
	Phone *string `form:"phone,omitempty" json:"phone,omitempty" xml:"phone,omitempty"`
	// Email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Prof Pic UUID
	Profpic *string `form:"profpic,omitempty" json:"profpic,omitempty" xml:"profpic,omitempty"`
}

// SignupUnauthorizedResponseBody is the type of the "signup" service "Signup"
// endpoint HTTP response body for the "unauthorized" error.
type SignupUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewSignupUnauthorizedResponseBody builds the HTTP response body from the
// result of the "Signup" endpoint of the "signup" service.
func NewSignupUnauthorizedResponseBody(res *goa.ServiceError) *SignupUnauthorizedResponseBody {
	body := &SignupUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSignupPayload builds a signup service Signup endpoint payload.
func NewSignupPayload(body *SignupRequestBody) *signup.SignupPayload {
	v := &signup.User{
		FirstName: *body.FirstName,
		LastName:  *body.LastName,
		Phone:     *body.Phone,
		Email:     *body.Email,
		Profpic:   body.Profpic,
	}
	res := &signup.SignupPayload{
		User: v,
	}

	return res
}

// ValidateSignupRequestBody runs the validations defined on SignupRequestBody
func ValidateSignupRequestBody(body *SignupRequestBody) (err error) {
	if body.FirstName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("firstName", "body"))
	}
	if body.LastName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("lastName", "body"))
	}
	if body.Phone == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("phone", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	return
}
