// Code generated by goa v3.10.1, DO NOT EDIT.
//
// auth HTTP server encoders and decoders
//
// Command:
// $ goa gen backend/design

package server

import (
	auth "backend/gen/auth"
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
)

// EncodeLoginResponse returns an encoder for responses returned by the auth
// Login endpoint.
func EncodeLoginResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*auth.LoginResult)
		enc := encoder(ctx, w)
		body := res.JWT
		if res.AccessControlAllowOrigin != nil {
			w.Header().Set("Access-Control-Allow-Origin", *res.AccessControlAllowOrigin)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeLoginRequest returns a decoder for requests sent to the auth Login
// endpoint.
func DecodeLoginRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			username string
			password string

			params = mux.Vars(r)
		)
		username = params["username"]
		password = params["password"]
		payload := NewLoginPayload(username, password)

		return payload, nil
	}
}

// EncodeSignupResponse returns an encoder for responses returned by the auth
// Signup endpoint.
func EncodeSignupResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*auth.SignupResult)
		enc := encoder(ctx, w)
		body := res.JWT
		if res.AccessControlAllowOrigin != nil {
			w.Header().Set("Access-Control-Allow-Origin", *res.AccessControlAllowOrigin)
		}
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeSignupRequest returns a decoder for requests sent to the auth Signup
// endpoint.
func DecodeSignupRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			username string
			password string

			params = mux.Vars(r)
		)
		username = params["username"]
		password = params["password"]
		payload := NewSignupPayload(username, password)

		return payload, nil
	}
}
