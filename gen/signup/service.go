// Code generated by goa v3.10.2, DO NOT EDIT.
//
// signup service
//
// Command:
// $ goa gen backend/design

package signup

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Service is the signup service interface.
type Service interface {
	// Signup implements Signup.
	Signup(context.Context, *SignupPayload) (res *SignupResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// BasicAuth implements the authorization logic for the Basic security scheme.
	BasicAuth(ctx context.Context, user, pass string, schema *security.BasicScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "signup"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"Signup"}

// Describes a user at signup
type NewUser struct {
	// First name
	FirstName string
	// Last name
	LastName string
	// Phone number
	Phone string
	// Email
	Email string
}

// SignupPayload is the payload type of the signup service Signup method.
type SignupPayload struct {
	// Raw username
	Username string
	// User password
	Password string
	User     *NewUser
}

// Response from logging in
type SignupResponse struct {
	// jwt used for future authentication
	JWT *string
	// users ID
	UserID *string
}

// SignupResult is the result type of the signup service Signup method.
type SignupResult struct {
	User *SignupResponse
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unauthorized", false, false, false)
}
