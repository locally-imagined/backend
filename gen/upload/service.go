// Code generated by goa v3.10.2, DO NOT EDIT.
//
// upload service
//
// Command:
// $ goa gen backend/design

package upload

import (
	"context"

	"goa.design/goa/v3/security"
)

// Service is the upload service interface.
type Service interface {
	// UploadPhoto implements upload_photo.
	UploadPhoto(context.Context, *UploadPhotoPayload) (res *UploadPhotoResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "upload"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"upload_photo"}

// UploadPhotoPayload is the payload type of the upload service upload_photo
// method.
type UploadPhotoPayload struct {
	// jwt used for auth
	Token string
	// photo content
	Content []byte
}

// UploadPhotoResult is the result type of the upload service upload_photo
// method.
type UploadPhotoResult struct {
	Success *string
}

// Credentials are invalid
type Unauthorized string

// Error returns an error description.
func (e Unauthorized) Error() string {
	return "Credentials are invalid"
}

// ErrorName returns "unauthorized".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e Unauthorized) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "unauthorized".
func (e Unauthorized) GoaErrorName() string {
	return "unauthorized"
}
